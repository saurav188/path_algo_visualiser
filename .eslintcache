[{"C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\index.js":"1","C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\App.js":"2","C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\reportWebVitals.js":"3","C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\components\\maze.js":"4","C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\components\\maze_controls.js":"5","C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\algorithms\\A_star.js":"6","C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\algorithms\\BFS.js":"7","C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\algorithms\\dijskra.js":"8"},{"size":481,"mtime":1606826733164,"results":"9","hashOfConfig":"10"},{"size":274,"mtime":1606892442650,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":1966,"mtime":1607144890008,"results":"13","hashOfConfig":"10"},{"size":5877,"mtime":1607071277519,"results":"14","hashOfConfig":"10"},{"size":4718,"mtime":1607143717237,"results":"15","hashOfConfig":"10"},{"size":3275,"mtime":1607087513485,"results":"16","hashOfConfig":"10"},{"size":3922,"mtime":1607087136346,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"pses87",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\index.js",[],["39","40"],"C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\App.js",["41"],"import Maze from './components/maze.js'\nimport Maze_control from './components/maze_controls.js'\nimport './css/index.css'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n          <Maze_control />\n          <Maze />\n        </div>\n    );\n}\n\nexport default App;\n","C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\reportWebVitals.js",[],"C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\components\\maze.js",["42","43"],"import '../css/maze.css'\r\nimport React, { useState } from 'react';\r\n\r\nfunction Maze() {\r\n    var no_rows=21;\r\n    var no_columns=31;\r\n    var only_click=false;\r\n    var rows=new Array(no_rows).fill(true);\r\n    var columns=new Array(no_columns).fill(true);\r\n    const [clicked,change_clicked]=useState(false);\r\n    function build_maze(event){\r\n        if(document.getElementById('drawer').checked === true){\r\n            event.target.classList.add('obstacle')\r\n        }else if(document.getElementById('eraser').checked === true){\r\n            if(event.target.classList.contains('obstacle')){\r\n                event.target.classList.remove('obstacle')\r\n            };\r\n        }else if(document.getElementById('start').checked === true && only_click==true){\r\n            const grids=Array.from(document.getElementsByClassName('grid'));\r\n            grids.forEach(each=>{\r\n                if(each.classList.contains('start')){\r\n                    each.classList.remove('start');\r\n                };\r\n            });\r\n            event.target.classList.add('start');\r\n        }else if(document.getElementById('target').checked === true && only_click==true){\r\n            const grids=Array.from(document.getElementsByClassName('grid'));\r\n            grids.forEach(each=>{\r\n                if(each.classList.contains('target')){\r\n                    each.classList.remove('target');\r\n                };\r\n            });\r\n            event.target.classList.add('target');\r\n        };\r\n        only_click=false;\r\n    };\r\n    return (\r\n        <div className=\"maze\">\r\n           {rows.map(()=>\r\n                columns.map(()=>\r\n                    <div className='grid' \r\n                        onClick={event=>{change_clicked(!clicked);only_click=true;build_maze(event);}} \r\n                        onMouseOver={event=>{if(clicked){build_maze(event)}}}>\r\n                    </div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Maze;\r\n","C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\components\\maze_controls.js",["44","45","46","47","48"],"import '../css/maze_control.css'\r\nimport A_star from '../algorithms/A_star'\r\nimport BFS from '../algorithms/BFS'\r\nimport dijkstra from '../algorithms/dijskra'\r\n\r\nfunction Maze_control(){\r\n    var no_rows=21;\r\n    var no_columns=31;\r\n    function choose_eraser(){\r\n        document.getElementById('eraser').checked = true;\r\n        document.getElementById('drawer').checked = false;\r\n        document.getElementById('start').checked = false;\r\n        document.getElementById('target').checked = false;\r\n    };\r\n    function choose_drawer(){\r\n        document.getElementById('eraser').checked = false;\r\n        document.getElementById('drawer').checked = true;\r\n        document.getElementById('start').checked = false;\r\n        document.getElementById('target').checked = false;\r\n    };\r\n    function choose_start(){\r\n        document.getElementById('start').checked = true;\r\n        document.getElementById('target').checked = false;\r\n        document.getElementById('eraser').checked = false;\r\n        document.getElementById('drawer').checked = false;\r\n    };\r\n    function choose_target(){\r\n        document.getElementById('start').checked = false;\r\n        document.getElementById('target').checked = true;\r\n        document.getElementById('eraser').checked = false;\r\n        document.getElementById('drawer').checked = false;\r\n    };\r\n    function getRandomInt(min, max) {\r\n        if(min===max){return min}\r\n        var min = Math.ceil(min);\r\n        var max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n    function get_next(current,visited){\r\n        var neighbours=[];\r\n        var x=current[0]\r\n        var y=current[1]\r\n        visited[`${x},${y}`]=true;\r\n        //top neighbour\r\n        if(y>=3 && visited[`${x},${y-2}`]===undefined){\r\n            neighbours.push([x,(y-2)])\r\n        };\r\n        //right neighbour\r\n        if(x<=(no_columns-2) && visited[`${x+2},${y}`]===undefined){\r\n            neighbours.push([(x+2),y])\r\n        };\r\n        //bottom neighbour\r\n        if(y<=(no_rows-2) && visited[`${x},${y+2}`]===undefined){\r\n            neighbours.push([x,(y+2)])\r\n        };\r\n        //left neighbour\r\n        if(x>=3 && visited[`${x-2},${y}`]===undefined){\r\n            neighbours.push([(x-2),y])\r\n        };\r\n        var no_neighbours=neighbours.length;\r\n        if(no_neighbours===0){\r\n            return 0;\r\n        };\r\n        var result=neighbours[getRandomInt(1,no_neighbours)-1]\r\n        return result\r\n    };\r\n    function maze_generator(e){\r\n        const grids=Array.from(document.getElementsByClassName('grid'));\r\n        grids.forEach(each=>{\r\n            if(each.classList.contains('obstacle')){\r\n                each.classList.remove('obstacle');\r\n            };\r\n        });\r\n        for(var i=0;i<grids.length;i++){\r\n            var y=Math.floor(i/no_columns)+1;\r\n            var x=(i%no_columns)+1;\r\n            if(x%2===0 || y%2===0){\r\n                grids[i].classList.add('obstacle');\r\n            };\r\n        };\r\n        var stack=[[1,1]];\r\n        var visited={}\r\n        var current=[1,1]\r\n        while(stack.length>0){\r\n            var next=get_next(current,visited);\r\n            if(next===0){current=stack.pop();continue};\r\n            var index=(((current[1]-1)*no_columns)+(current[0]-1))\r\n            //if current and next is in same row\r\n            if(current[1]===next[1]){\r\n                //left side\r\n                if(current[0]>next[0]){\r\n                        grids[index-1].classList.remove('obstacle');\r\n                }\r\n                //right side\r\n                else if(current[0]<next[0]){\r\n                    grids[index+1].classList.remove('obstacle');\r\n                };\r\n            }\r\n            //if current and next is in same column\r\n            else if(current[0]===next[0]){\r\n                //top\r\n                if(current[1]>next[1]){\r\n                    grids[index-no_columns].classList.remove('obstacle');\r\n                }\r\n                //bottom\r\n                else if(current[1]<next[1]){\r\n                    grids[index+no_columns].classList.remove('obstacle')\r\n                };\r\n            };\r\n            setTimeout(500)\r\n            stack.push(next);\r\n            current=next;\r\n        };\r\n    };\r\n    function find_path(){\r\n        var algo=document.getElementById('algorithm').value;\r\n        if(algo=='A* algorithm'){A_star();return}\r\n        if(algo=='BFS'){BFS();return}\r\n        if(algo=='dijkstra'){dijkstra();return}\r\n    };\r\n    return (\r\n        <div className=\"maze_control\">\r\n            <h4 className=\"maze-building-title\">Algorithm</h4>\r\n            <select id='algorithm'>\r\n                <option value='A* algorithm'>A* algorithm</option>\r\n                <option value='BFS'>BFS</option>\r\n                <option value='dijkstra'>dijkstra</option>\r\n            </select>\r\n            <div className=\"algo-btns\">\r\n                <input type=\"checkbox\" id=\"start\" class=\"checkbox\" onClick={choose_start}></input>\r\n                <lable for=\"eraser\">start</lable><br></br>\r\n                <input type=\"checkbox\" id=\"target\" class=\"checkbox\" onClick={choose_target}></input>\r\n                <lable for=\"drawer\">target</lable><br></br>\r\n                <button id =\"find-path-btn\" onClick={()=>find_path()}>Find path</button>\r\n            </div>\r\n            <h4 className=\"maze-building-title\">Maze building tools</h4>\r\n            <hr></hr>\r\n            <input type=\"checkbox\" id=\"eraser\" class=\"checkbox\" onClick={choose_eraser}></input>\r\n            <lable for=\"eraser\">eraser</lable>\r\n            <input type=\"checkbox\" id=\"drawer\" class=\"checkbox\" onClick={choose_drawer}></input>\r\n            <lable for=\"drawer\">drawer</lable>\r\n            <button class=\"btn generate-maze\" onClick={e=>maze_generator(e)}>Generate maze</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Maze_control;\r\n\r\n","C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\algorithms\\A_star.js",["49","50"],"function A_star(){\r\n    var no_rows=21;\r\n    var no_columns=31;\r\n    const grids=Array.from(document.getElementsByClassName('grid'));\r\n    var x,y;\r\n    var found_start=false;\r\n    var target=[]\r\n    var found_target=false;\r\n    var i=0;\r\n    grids.forEach(grid=>{\r\n        if(grid.classList.contains('start')){\r\n            y=Math.floor(i/no_columns)+1;\r\n            x=(i%no_columns)+1;\r\n            found_start=true;\r\n        }else if(grid.classList.contains('target')){\r\n            target.push((i%no_columns)+1);\r\n            target.push(Math.floor(i/no_columns)+1);\r\n            found_target=true;\r\n        };\r\n        i++;\r\n    });\r\n    if(!found_start || !found_target){\r\n        alert('choose target and start grid');\r\n        return\r\n    };\r\n    function get_neighbours(x,y,visited){\r\n        var neighbours=[];\r\n        var index=((y-1)*no_columns)+(x-1)\r\n        //top neighbour\r\n        if(y-1>0 && !grids[index-no_columns].classList.contains('obstacle') && visited[x+','+(y-1)]===undefined){\r\n            neighbours.push([x,(y-1)])\r\n        };\r\n        //right neighbour\r\n        if(x+1<=no_columns && !grids[index+1].classList.contains('obstacle') && visited[(x+1)+','+y]===undefined){\r\n            neighbours.push([(x+1),y])\r\n        };\r\n        //bottom neighbour\r\n        if(y+1<=no_rows && !grids[index+no_columns].classList.contains('obstacle') && visited[x+','+(y+1)]===undefined){\r\n            neighbours.push([x,(y+1)])\r\n        };\r\n        //left neighbour\r\n        if(x-1>0 && !grids[index-1].classList.contains('obstacle') && visited[(x-1)+','+y]===undefined){\r\n            neighbours.push([(x-1),y])\r\n        };\r\n        return neighbours;\r\n    };\r\n    function get_heuristic(current,target){\r\n        return  dist[current[0]+','+current[1]]+(Math.abs(target[0]-current[0]))+(Math.abs(target[1]-current[1]));\r\n    };\r\n    function sleep(milliseconds) {\r\n        const date = Date.now();\r\n        let currentDate = null;\r\n        do {\r\n          currentDate = Date.now();\r\n        } while (currentDate - date < milliseconds);\r\n      }\r\n    found_target=false;\r\n    var start=[x,y]\r\n    var open=[[x,y]];\r\n    var visited={};\r\n    var j=1;\r\n    var k=1;\r\n    var active_grids=[];\r\n    grids.forEach(grid=>{\r\n        if(!grid.classList.contains('obstacle')){\r\n            active_grids.push([j,k]);\r\n        };\r\n        if(j===no_columns){\r\n            k++;\r\n            j=1;\r\n        }else{\r\n            j++;\r\n        };\r\n    });\r\n    let dist={};\r\n    let parent={}\r\n    active_grids.forEach(each=>{\r\n        dist[each[0]+','+each[1]]=999999;\r\n    });\r\n    dist[x+','+y]=0;\r\n    var neighbours,winner,current,temp;\r\n    i=1;\r\n    var intervalId=null;\r\n    intervalId=setInterval(()=>{\r\n        if(open.length<=0||found_target){clearInterval(intervalId);}\r\n        if(!found_target){\r\n            winner=0;\r\n            for(var i=0;i<open.length;i++){\r\n                if(get_heuristic(open[i],target)<get_heuristic(open[winner],target)){\r\n                    winner=i;\r\n                };\r\n            };\r\n            current=open[winner];\r\n            if(current[0]===target[0] && current[1]==target[1]){\r\n                found_target=true;\r\n                x=current[0];\r\n                y=current[1];\r\n                return\r\n            };\r\n            open.splice(winner,1);\r\n            visited[current[0]+','+current[1]]=true;\r\n            neighbours=get_neighbours(current[0],current[1],visited);\r\n            neighbours.forEach(neighbour=>{\r\n                if(dist[current[0]+','+current[1]]+1<dist[neighbour[0]+','+neighbour[1]]){\r\n                    dist[neighbour[0]+','+neighbour[1]]=dist[current[0]+','+current[1]]+1;\r\n                    parent[neighbour[0]+','+neighbour[1]]=[current[0],current[1]];\r\n                    if(!(neighbour in open)){\r\n                        open.push(neighbour)\r\n                    };\r\n                    if(!grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].classList.contains('start')\r\n                        && !grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].classList.contains('target')){\r\n                            grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].classList.add('seen');\r\n                    };\r\n                };\r\n            });\r\n        }else{\r\n            while(!(x===start[0] && y===start[1])){\r\n            if(!grids[((y-1)*no_columns)+(x-1)].classList.contains('start') && \r\n                !grids[((y-1)*no_columns)+(x-1)].classList.contains('target')){\r\n                    grids[((y-1)*no_columns)+(x-1)].classList.add('path');\r\n            };\r\n            temp=parent[x+','+y];\r\n            x=temp[0];\r\n            y=temp[1];\r\n        };\r\n        }\r\n    },100);\r\n};\r\n\r\nexport default A_star;","C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\algorithms\\BFS.js",[],"C:\\Users\\Saurav\\Desktop\\git projects\\path_algo_visualiser\\src\\algorithms\\dijskra.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":8,"column":11,"nodeType":"57","endLine":8,"endColumn":27},{"ruleId":"58","severity":1,"message":"59","line":18,"column":81,"nodeType":"60","messageId":"61","endLine":18,"endColumn":83},{"ruleId":"58","severity":1,"message":"59","line":26,"column":82,"nodeType":"60","messageId":"61","endLine":26,"endColumn":84},{"ruleId":"62","severity":1,"message":"63","line":35,"column":13,"nodeType":"64","messageId":"65","endLine":35,"endColumn":16},{"ruleId":"62","severity":1,"message":"66","line":36,"column":13,"nodeType":"64","messageId":"65","endLine":36,"endColumn":16},{"ruleId":"58","severity":1,"message":"59","line":117,"column":16,"nodeType":"60","messageId":"61","endLine":117,"endColumn":18},{"ruleId":"58","severity":1,"message":"59","line":118,"column":16,"nodeType":"60","messageId":"61","endLine":118,"endColumn":18},{"ruleId":"58","severity":1,"message":"59","line":119,"column":16,"nodeType":"60","messageId":"61","endLine":119,"endColumn":18},{"ruleId":"67","severity":1,"message":"68","line":50,"column":14,"nodeType":"64","messageId":"69","endLine":50,"endColumn":19},{"ruleId":"58","severity":1,"message":"59","line":94,"column":52,"nodeType":"60","messageId":"61","endLine":94,"endColumn":54},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"react/jsx-pascal-case","Imported JSX component Maze_control must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'min' is already defined.","Identifier","redeclared","'max' is already defined.","no-unused-vars","'sleep' is defined but never used.","unusedVar","no-global-assign","no-unsafe-negation"]