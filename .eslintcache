[{"C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\index.js":"1","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\App.js":"2","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\reportWebVitals.js":"3","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\components\\maze.js":"4","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\components\\maze_controls.js":"5","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\algorithms\\A_star.js":"6","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\algorithms\\dijskra.js":"7","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\algorithms\\BFS.js":"8","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\algorithms\\Genetic_algorithm.js":"9","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\components\\user_manual.js":"10","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\maze_builder.js":"11","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\maze_generator.js":"12","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\more_options.js":"13","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\select_start.js":"14","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\select_algorithm.js":"15","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\GA_options.js":"16","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\start_stop_algo.js":"17","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\select_target.js":"18","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\maze_eraser.js":"19"},{"size":497,"mtime":1619094088760,"results":"20","hashOfConfig":"21"},{"size":734,"mtime":1620987972410,"results":"22","hashOfConfig":"21"},{"size":375,"mtime":1619094088762,"results":"23","hashOfConfig":"21"},{"size":2964,"mtime":1620986823006,"results":"24","hashOfConfig":"21"},{"size":10092,"mtime":1620986488237,"results":"25","hashOfConfig":"21"},{"size":5527,"mtime":1620972169026,"results":"26","hashOfConfig":"21"},{"size":4793,"mtime":1620972614646,"results":"27","hashOfConfig":"21"},{"size":3884,"mtime":1620972215967,"results":"28","hashOfConfig":"21"},{"size":13622,"mtime":1621074888150,"results":"29","hashOfConfig":"21"},{"size":3232,"mtime":1621066471199,"results":"30","hashOfConfig":"21"},{"size":885,"mtime":1621064176911,"results":"31","hashOfConfig":"21"},{"size":515,"mtime":1621064603947,"results":"32","hashOfConfig":"21"},{"size":634,"mtime":1621065991136,"results":"33","hashOfConfig":"21"},{"size":647,"mtime":1621063677769,"results":"34","hashOfConfig":"21"},{"size":503,"mtime":1621064749825,"results":"35","hashOfConfig":"21"},{"size":749,"mtime":1621065308871,"results":"36","hashOfConfig":"21"},{"size":760,"mtime":1621065596171,"results":"37","hashOfConfig":"21"},{"size":658,"mtime":1621063662299,"results":"38","hashOfConfig":"21"},{"size":947,"mtime":1621064151924,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"yerp7l",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"42"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"42"},"C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\index.js",[],["95","96"],"C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\App.js",["97","98"],"import Maze from './components/maze.js'\r\nimport Maze_control from './components/maze_controls.js'\r\nimport User_Mannual from './components/user_manual.js'\r\nimport './css/index.css'\r\n\r\nfunction App() {\r\n    var maze_width=window.innerWidth-25;\r\n    var maze_height=(0.8*window.innerHeight)-25;\r\n    var no_rows=Math.floor(maze_height/(25+(2*0.01)));\r\n    var no_columns=Math.floor(maze_width/(25+(2*0.01)));\r\n    document.title=\"Path algo visualizer\";\r\n    return (\r\n        <div className=\"App\">\r\n          <Maze_control rows={no_rows} columns={no_columns} />\r\n          <Maze width={maze_width} height={maze_height} rows={no_rows} columns={no_columns} />\r\n          <User_Mannual />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\reportWebVitals.js",[],"C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\components\\maze.js",["99","100"],"import '../css/maze.css'\r\nimport React, { useState,useEffect } from 'react';\r\n\r\n//Component: maze\r\n//\r\n//includes:\r\n//  onbstacles building function\r\n//  actual maze\r\n\r\nfunction Maze(props) {\r\n    var maze_width=props.width;\r\n    var maze_height=props.height;\r\n    var no_rows=props.rows;\r\n    var no_columns=props.columns;\r\n    var only_click=false;\r\n    var rows=new Array(no_rows).fill(true);\r\n    var columns=new Array(no_columns).fill(true);\r\n    const [clicked,change_clicked]=useState(false);\r\n    function check_for_obstacle_in_target(){\r\n        var target=Array.from(document.getElementsByClassName(\"target\"))[0];\r\n        target.classList.remove(\"obstacle\");\r\n    }\r\n    //obstacle_building_function\r\n    function build_maze(event){\r\n        if(document.getElementById('drawer').checked === true){\r\n            event.target.classList.add('obstacle')\r\n        }else if(document.getElementById('eraser').checked === true){\r\n            if(event.target.classList.contains('obstacle')){\r\n                event.target.classList.remove('obstacle')\r\n            };\r\n        }else if(document.getElementById('start').checked === true && only_click==true){\r\n            const grids=Array.from(document.getElementsByClassName('grid'));\r\n            grids.forEach(each=>{\r\n                if(each.classList.contains('start')){\r\n                    each.classList.remove('start');\r\n                };\r\n            });\r\n            event.target.classList.add('start');\r\n        }else if(document.getElementById('target').checked === true && only_click==true){\r\n            const grids=Array.from(document.getElementsByClassName('grid'));\r\n            grids.forEach(each=>{\r\n                if(each.classList.contains('target')){\r\n                    each.classList.remove('target');\r\n                };\r\n            });\r\n            event.target.classList.add('target');\r\n        };\r\n        only_click=false;\r\n        check_for_obstacle_in_target();\r\n    };\r\n    //adding start and target grid at the beginning\r\n    useEffect(()=>{\r\n            const grids=Array.from(document.querySelectorAll(\".grid\"));\r\n            grids[0].classList.add(\"start\");\r\n            grids[grids.length-1].classList.add(\"target\");\r\n    },[]);\r\n    \r\n    return (\r\n        <div className=\"maze\" style={{\r\n            maxWidth:{maze_width}+\"px\",\r\n            minWidth:{maze_width}+\"px\",\r\n            maxHeight:{maze_height}+\"px\",\r\n            minHeight:{maze_height}+\"px\"\r\n        }}>\r\n           {rows.map(()=>\r\n                <div className=\"maze_row\">\r\n                    {columns.map(()=>\r\n                        <div className='grid' \r\n                            onClick={event=>{change_clicked(!clicked);only_click=true;build_maze(event);}} \r\n                            onMouseOver={event=>{if(clicked){build_maze(event)}}}>\r\n                        </div>\r\n\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Maze;\r\n","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\components\\maze_controls.js",["101","102","103","104","105","106","107","108"],"import '../css/maze_control.css'\r\nimport A_star from '../algorithms/A_star'\r\nimport BFS from '../algorithms/BFS'\r\nimport dijkstra from '../algorithms/dijskra'\r\nimport genetic_algorithm from '../algorithms/Genetic_algorithm'\r\nimport { useState,useEffect } from 'react';\r\n\r\n\r\n// Component: maze controls\r\n// include:\r\n//   chooses maze building tools\r\n//   maze generating algo\r\n//   all other controls\r\n\r\nfunction Maze_control(props){\r\n    // uses the windows width and height to find no_rows and no_columns\r\n    var no_rows=props.rows;\r\n    var no_columns=props.columns;\r\n    function choose_eraser(){\r\n        document.getElementById('eraser').checked = true;\r\n        document.getElementById('drawer').checked = false;\r\n        document.getElementById('start').checked = false;\r\n        document.getElementById('target').checked = false;\r\n    };\r\n    function choose_drawer(){\r\n        document.getElementById('eraser').checked = false;\r\n        document.getElementById('drawer').checked = true;\r\n        document.getElementById('start').checked = false;\r\n        document.getElementById('target').checked = false;\r\n    };\r\n    function choose_start(){\r\n        document.getElementById('start').checked = true;\r\n        document.getElementById('target').checked = false;\r\n        document.getElementById('eraser').checked = false;\r\n        document.getElementById('drawer').checked = false;\r\n    };\r\n    function choose_target(){\r\n        document.getElementById('start').checked = false;\r\n        document.getElementById('target').checked = true;\r\n        document.getElementById('eraser').checked = false;\r\n        document.getElementById('drawer').checked = false;\r\n    };\r\n    // gets random interger in [min,max)\r\n    function getRandomInt(min, max) {\r\n        if(min===max){return min}\r\n        var min = Math.ceil(min);\r\n        var max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n    //gives a random neighbour of a  grid for maze generating algo\r\n    function get_next(current,visited){\r\n        var neighbours=[];\r\n        var x=current[0]\r\n        var y=current[1]\r\n        visited[`${x},${y}`]=true;\r\n        //top neighbour\r\n        if(y>=3 && visited[`${x},${y-2}`]===undefined){\r\n            neighbours.push([x,(y-2)])\r\n        };\r\n        //right neighbour\r\n        if(x<=(no_columns-2) && visited[`${x+2},${y}`]===undefined){\r\n            neighbours.push([(x+2),y])\r\n        };\r\n        //bottom neighbour\r\n        if(y<=(no_rows-2) && visited[`${x},${y+2}`]===undefined){\r\n            neighbours.push([x,(y+2)])\r\n        };\r\n        //left neighbour\r\n        if(x>=3 && visited[`${x-2},${y}`]===undefined){\r\n            neighbours.push([(x-2),y])\r\n        };\r\n        var no_neighbours=neighbours.length;\r\n        if(no_neighbours===0){\r\n            return 0;\r\n        };\r\n        var result=neighbours[getRandomInt(1,no_neighbours)-1]\r\n        return result\r\n    };\r\n    // removes obstacle class from the target grid\r\n    function check_for_obstacle_in_target(){\r\n        var target=Array.from(document.getElementsByClassName(\"target\"))[0];\r\n        target.classList.remove(\"obstacle\");\r\n    }\r\n    // maze generating function\r\n    function maze_generator(e){\r\n        const grids=Array.from(document.getElementsByClassName('grid'));\r\n        refresh();\r\n        for(var i=0;i<grids.length;i++){\r\n            var y=Math.floor(i/no_columns)+1;\r\n            var x=(i%no_columns)+1;\r\n            if(x%2===0 || y%2===0){\r\n                grids[i].classList.add('obstacle');\r\n            };\r\n        };\r\n        var stack=[[1,1]];\r\n        var visited={}\r\n        var current=[1,1]\r\n        var intervarId=setInterval(()=>{\r\n            if(stack.length<=0){clearInterval(intervarId)}\r\n            var next=get_next(current,visited);\r\n            if(next===0){current=stack.pop();return};\r\n            var index=(((current[1]-1)*no_columns)+(current[0]-1))\r\n            //if current and next is in same row\r\n            if(current[1]===next[1]){\r\n                //left side\r\n                if(current[0]>next[0]){\r\n                        grids[index-1].classList.remove('obstacle');\r\n                }\r\n                //right side\r\n                else if(current[0]<next[0]){\r\n                    grids[index+1].classList.remove('obstacle');\r\n                };\r\n            }\r\n            //if current and next is in same column\r\n            else if(current[0]===next[0]){\r\n                //top\r\n                if(current[1]>next[1]){\r\n                    grids[index-no_columns].classList.remove('obstacle');\r\n                }\r\n                //bottom\r\n                else if(current[1]<next[1]){\r\n                    grids[index+no_columns].classList.remove('obstacle')\r\n                };\r\n            };\r\n            stack.push(next);\r\n            current=next;\r\n        },7.5);\r\n        check_for_obstacle_in_target();\r\n    };\r\n    // clears the maze for maze generation\r\n    function refresh(){\r\n        const grids=Array.from(document.getElementsByClassName('grid'));\r\n        grids.forEach(each=>{\r\n            if(each.classList.contains('obstacle')){\r\n                each.classList.remove('obstacle');\r\n            };\r\n            if(each.classList.contains('seen')){\r\n                each.classList.remove('seen');\r\n            };\r\n            if(each.classList.contains('path')){\r\n                each.classList.remove('path');\r\n            };\r\n        });\r\n    };\r\n    // stops any running algorithm and removes the path found\r\n    function stop_refresh(){\r\n        set_countinue_serching(continue_seaching==\"true\"?continue_seaching=\"false\":continue_seaching=\"true\");\r\n        const grids=Array.from(document.getElementsByClassName('grid'));\r\n        grids.forEach(each=>{\r\n            if(each.classList.contains('seen')){\r\n                each.classList.remove('seen');\r\n            };\r\n            if(each.classList.contains('path')){\r\n                each.classList.remove('path');\r\n            };\r\n            each.innerHTML=\"\";\r\n        });\r\n    };\r\n    var [continue_seaching,set_countinue_serching]=useState(\"false\");\r\n    // calls the algorithm choosen by the user\r\n    function find_path(){\r\n        stop_refresh();\r\n        set_countinue_serching(continue_seaching=\"true\");\r\n        var algo=document.getElementById('algorithm').value;\r\n        if(algo=='Genetic Algorithm'){genetic_algorithm(no_rows,no_columns);return}\r\n        if(algo=='A* algorithm'){A_star(no_rows,no_columns);return}\r\n        if(algo=='BFS'){BFS(no_rows,no_columns);return}\r\n        if(algo=='dijkstra'){dijkstra(no_rows,no_columns);return}\r\n    };\r\n    // shows more options when in mobile view\r\n    function show_more_options(){\r\n        var algo_choosing_div=document.querySelector(\".algo_choseing_div\");\r\n        var genetic_algo_options=document.querySelector(\".genetic_algo_options\");\r\n        var show_btn=document.querySelector('#show_btn');\r\n        if(show_btn.innerHTML==\"X\"){\r\n            algo_choosing_div.classList.remove(\"show_more_options1\");\r\n            genetic_algo_options.classList.remove(\"show_more_options2\");\r\n            show_btn.innerHTML=\"More\"\r\n        }\r\n        else{\r\n            algo_choosing_div.classList.add(\"show_more_options1\");\r\n            genetic_algo_options.classList.add(\"show_more_options2\");\r\n            show_btn.innerHTML=\"X\";\r\n        };\r\n        return\r\n    }\r\n    // adds population and mutation rate for genetic algorithm\r\n    useEffect(()=>{\r\n        document.getElementById(\"genetic_algo_population\").value=100;\r\n        document.getElementById(\"genetic_algo_mutation_rate\").value=10;\r\n    },[]);\r\n    return (\r\n        <div className=\"maze_control\">\r\n            <div class=\"maze_control_variables\">\r\n                <div id=\"maze_control_varaible_continue_searching\">{continue_seaching}</div>\r\n            </div>\r\n            <button class=\"show-btn\" onClick={()=>{show_more_options()}} id=\"show_btn\">More</button>\r\n            <button onClick={()=>stop_refresh()}> Stop </button><br></br>\r\n            <div className=\"algo_choseing_div\">\r\n                <h4 className=\"maze-building-title\">Algorithm:</h4>\r\n                <select id='algorithm'>\r\n                    <option value='A* algorithm'>A* algorithm</option>\r\n                    <option value='Genetic Algorithm'>Genetic Algorithm</option>\r\n                    <option value='BFS'>BFS</option>\r\n                    <option value='dijkstra'>dijkstra</option>\r\n                </select>\r\n            </div>\r\n            <br></br>\r\n            <div className=\"genetic_algo_options\">\r\n                <label for=\"genetic_algo_population\">Population: </label>\r\n                <input id=\"genetic_algo_population\" type=\"number\" min=\"10\"></input><br></br><br></br>\r\n                <label for=\"genetic_algo_mutation_rate\">Mutaion Rate: </label>\r\n                <input id=\"genetic_algo_mutation_rate\" type=\"number\" min=\"0\"></input><br></br>\r\n            </div>\r\n            <br></br>\r\n            <div className=\"algo-btns\">\r\n                <input type=\"checkbox\" id=\"start\" class=\"checkbox\" onClick={choose_start}></input>\r\n                <lable for=\"eraser\"> Start</lable><br></br>\r\n                <input type=\"checkbox\" id=\"target\" class=\"checkbox\" onClick={choose_target}></input>\r\n                <lable for=\"drawer\"> Target</lable><br></br>\r\n                <button id =\"find-path-btn\" onClick={()=>find_path()}>Find path</button>\r\n            </div>\r\n            <div className=\"maze_building_options\">\r\n                <h4 className=\"maze-building-title\">Maze building tools:</h4>\r\n                <input type=\"checkbox\" id=\"eraser\" class=\"checkbox\" onClick={choose_eraser}></input>\r\n                <lable for=\"eraser\"> Eraser</lable><br></br>\r\n                <input type=\"checkbox\" id=\"drawer\" class=\"checkbox\" onClick={choose_drawer}></input>\r\n                <lable for=\"drawer\"> Builder</lable><br></br>\r\n                <button class=\"btn generate-maze\" onClick={e=>maze_generator(e)}>Generate maze</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Maze_control;\r\n\r\n","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\algorithms\\A_star.js",["109","110"],"// A* path finding algorithm \r\n\r\nfunction A_star(no_rows,no_columns){\r\n    const grids=Array.from(document.getElementsByClassName('grid'));\r\n    var x,y;\r\n    var found_start=false;\r\n    var target=[]\r\n    var found_target=false;\r\n    var i=0;\r\n    // find target and start cooridinates\r\n    grids.forEach(grid=>{\r\n        if(grid.classList.contains('start')){\r\n            y=Math.floor(i/no_columns)+1;\r\n            x=(i%no_columns)+1;\r\n            found_start=true;\r\n        }else if(grid.classList.contains('target')){\r\n            target.push((i%no_columns)+1);\r\n            target.push(Math.floor(i/no_columns)+1);\r\n            found_target=true;\r\n        };\r\n        i++;\r\n    });\r\n    if(!found_start || !found_target){\r\n        alert('choose target and start grid');\r\n        return\r\n    };\r\n    //get all available neighbours of the given grid(x,y)\r\n    function get_neighbours(x,y,visited){\r\n        var neighbours=[];\r\n        var index=((y-1)*no_columns)+(x-1)\r\n        //top neighbour\r\n        if(y-1>0 && !grids[index-no_columns].classList.contains('obstacle') && visited[x+','+(y-1)]===undefined){\r\n            neighbours.push([x,(y-1)])\r\n        };\r\n        //right neighbour\r\n        if(x+1<=no_columns && !grids[index+1].classList.contains('obstacle') && visited[(x+1)+','+y]===undefined){\r\n            neighbours.push([(x+1),y])\r\n        };\r\n        //bottom neighbour\r\n        if(y+1<=no_rows && !grids[index+no_columns].classList.contains('obstacle') && visited[x+','+(y+1)]===undefined){\r\n            neighbours.push([x,(y+1)])\r\n        };\r\n        //left neighbour\r\n        if(x-1>0 && !grids[index-1].classList.contains('obstacle') && visited[(x-1)+','+y]===undefined){\r\n            neighbours.push([(x-1),y])\r\n        };\r\n        return neighbours;\r\n    };\r\n    // heuristic function for current\r\n    function get_heuristic(current,target){\r\n        return  dist[current[0]+','+current[1]]+(Math.abs(target[0]-current[0]))+(Math.abs(target[1]-current[1]));\r\n    };\r\n    found_target=false;\r\n    var start=[x,y]\r\n    var open=[[x,y]];\r\n    var visited={};\r\n    var j=1;\r\n    var k=1;\r\n    var active_grids=[];\r\n    //puts all the active grid to the array gids\r\n    grids.forEach(grid=>{\r\n        if(!grid.classList.contains('obstacle')){\r\n            active_grids.push([j,k]);\r\n        };\r\n        if(j===no_columns){\r\n            k++;\r\n            j=1;\r\n        }else{\r\n            j++;\r\n        };\r\n    });\r\n    let dist={};\r\n    let parent={}\r\n    //dist from start of all the grids is infinity \r\n    active_grids.forEach(each=>{\r\n        dist[each[0]+','+each[1]]=999999;\r\n    });\r\n    //dist of start from start is 0\r\n    dist[x+','+y]=0;\r\n    var neighbours,winner,current,temp;\r\n    i=1;\r\n    var intervalId=null;\r\n    intervalId=setInterval(()=>{\r\n        if(document.getElementById(\"maze_control_varaible_continue_searching\").innerHTML==\"false\"){\r\n            //stop the algorithm from running\r\n            clearInterval(intervalId);\r\n            return;\r\n        };\r\n        if(open.length<=0||found_target){clearInterval(intervalId);}\r\n        if(!found_target){\r\n            winner=0;\r\n            // chooses a winner with the least heuristic\r\n            for(var i=0;i<open.length;i++){\r\n                if(get_heuristic(open[i],target)<get_heuristic(open[winner],target)){\r\n                    winner=i;\r\n                };\r\n            };\r\n            current=open[winner];\r\n            //if cuurent is the target stop \r\n            if(current[0]===target[0] && current[1]==target[1]){\r\n                found_target=true;\r\n                x=current[0];\r\n                y=current[1];\r\n                return\r\n            };\r\n            //remove current from open array\r\n            open.splice(winner,1);\r\n            visited[current[0]+','+current[1]]=true;\r\n            neighbours=get_neighbours(current[0],current[1],visited);\r\n            neighbours.forEach(neighbour=>{\r\n                //finds if neighbour is reached yet \r\n                if(dist[current[0]+','+current[1]]+1<dist[neighbour[0]+','+neighbour[1]]){//this distance < Infinity if not visited\r\n                    //add nearest parent to neibour and new distance \r\n                    dist[neighbour[0]+','+neighbour[1]]=dist[current[0]+','+current[1]]+1;\r\n                    parent[neighbour[0]+','+neighbour[1]]=[current[0],current[1]];\r\n                    if(!(neighbour in open)){\r\n                        //add neighbout to open if its not in it yet\r\n                        open.push(neighbour)\r\n                    };\r\n                    //showt the grid as seen if the grid is not the start or the target\r\n                    if(!grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].classList.contains('start')\r\n                        && !grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].classList.contains('target')){\r\n                            grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].classList.add('seen');\r\n                    };\r\n                };\r\n            });\r\n        }else{\r\n            //display the final path found\r\n            while(!(x===start[0] && y===start[1])){\r\n            if(!grids[((y-1)*no_columns)+(x-1)].classList.contains('start') && \r\n                !grids[((y-1)*no_columns)+(x-1)].classList.contains('target')){\r\n                    grids[((y-1)*no_columns)+(x-1)].classList.add('path');\r\n            };\r\n            temp=parent[x+','+y];\r\n            x=temp[0];\r\n            y=temp[1];\r\n        };\r\n        }\r\n    },25);\r\n};\r\n\r\nexport default A_star;","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\algorithms\\dijskra.js",["111"],"export default function dijsktra(no_rows,no_columns){\r\n    const grids=Array.from(document.getElementsByClassName('grid'));\r\n    let x,y;\r\n    var found_start=false;\r\n    let target=[]\r\n    var found_target=false;\r\n    var i=0;\r\n    //finds start and target grid\r\n    grids.forEach(grid=>{\r\n        if(grid.classList.contains('start')){\r\n            y=Math.floor(i/no_columns)+1;\r\n            x=(i%no_columns)+1;\r\n            found_start=true;\r\n        }else if(grid.classList.contains('target')){\r\n            target.push((i%no_columns)+1);\r\n            target.push(Math.floor(i/no_columns)+1);\r\n            found_target=true;\r\n        };\r\n        i++;\r\n    });\r\n    //checks if start and target grid is selected\r\n    if(!found_start || !found_target){\r\n        alert('choose target and start grid');\r\n        return\r\n    };\r\n    //gets all the non active ,non visited neighbours\r\n    //gets all the non active ,non visited neighbours\r\n    function get_neighbours(x,y){\r\n        var neighbours=[];\r\n        var index=((y-1)*no_columns)+(x-1);\r\n        //top neighbour\r\n        if(y-1>0 && !grids[index-no_columns].classList.contains('obstacle')){\r\n            neighbours.push([x,(y-1)]);\r\n        };\r\n        //right neighbour\r\n        if(x+1<=no_columns && !grids[index+1].classList.contains('obstacle')){\r\n            neighbours.push([(x+1),y]);\r\n        };\r\n        //bottom neighbour\r\n        if(y+1<=no_rows && !grids[index+no_columns].classList.contains('obstacle')){\r\n            neighbours.push([x,(y+1)]);\r\n        };\r\n        //left neighbour\r\n        if(x-1>0 && !grids[index-1].classList.contains('obstacle')){\r\n            neighbours.push([(x-1),y]);\r\n        };\r\n        return neighbours;\r\n    };\r\n    var j=1;\r\n    var k=1;\r\n    var active_grids=[]\r\n    //puts all the active grid to the array gids\r\n    grids.forEach(grid=>{\r\n        if(!grid.classList.contains('obstacle')){\r\n            active_grids.push([j,k]);\r\n        };\r\n        if(j===no_columns){\r\n            k++;\r\n            j=1;\r\n        }else{\r\n            j++;\r\n        };\r\n    });\r\n    let dist={};\r\n    //dist from start of all the grids is infinity \r\n    active_grids.forEach(each=>{\r\n        dist[each[0]+','+each[1]]=999999;\r\n    });\r\n    //dist of start from start is 0\r\n    dist[x+','+y]=0;\r\n    var start=[x,y]\r\n    var parent={};\r\n    let neighbours,min\r\n    let current,z,temp;\r\n    var keep_looping=true;\r\n    var intervalId=null;\r\n    intervalId=setInterval(()=>{\r\n        if(document.getElementById(\"maze_control_varaible_continue_searching\").innerHTML==\"false\"){\r\n            //stops the algorithm if stop btn is clicked\r\n            clearInterval(intervalId);\r\n            return;\r\n        };\r\n        if(active_grids.length<=0 || !keep_looping){clearInterval(intervalId);}\r\n        min=99999;\r\n        for(var i=0;i<active_grids.length;i++){\r\n            temp=dist[active_grids[i][0]+','+active_grids[i][1]]\r\n            if(min>temp){\r\n                min=temp;\r\n                z=i;\r\n            };\r\n        };\r\n        current=active_grids[z];\r\n        //removes current form active_grids\r\n        active_grids.splice(z,1);\r\n        neighbours=get_neighbours(current[0],current[1]);\r\n        neighbours.forEach(neighbour=>{\r\n            //adds best parent to the neighbour\r\n            if(dist[current[0]+','+current[1]]+1<dist[neighbour[0]+','+neighbour[1]]){\r\n                dist[neighbour[0]+','+neighbour[1]]=dist[current[0]+','+current[1]]+1;\r\n                parent[neighbour[0]+','+neighbour[1]]=[current[0],current[1]]\r\n            }\r\n            //checks if the the target is reached\r\n            if(neighbour[0]===target[0] && neighbour[1]===target[1]){\r\n                x=neighbour[0];\r\n                y=neighbour[1];\r\n                keep_looping=false\r\n            };\r\n            //shows the grid is visited\r\n            if(!grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].classList.contains('start')\r\n                && !grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].classList.contains('target')){\r\n                    grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].classList.add('seen');\r\n                    grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].innerHTML=dist[neighbour[0]+\",\"+neighbour[1]]\r\n            };\r\n        })\r\n        if(!keep_looping){//display the final path \r\n            while(!(x===start[0] && y===start[1])){\r\n                if(!grids[((y-1)*no_columns)+(x-1)].classList.contains('start') && \r\n                    !grids[((y-1)*no_columns)+(x-1)].classList.contains('target')){\r\n                        grids[((y-1)*no_columns)+(x-1)].classList.add('path');\r\n                };\r\n                temp=parent[x+','+y];\r\n                x=temp[0];\r\n                y=temp[1];\r\n            };\r\n        }\r\n    }, 25);\r\n};\r\n","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\algorithms\\BFS.js",["112"],"export default function BFS(no_rows,no_columns){\r\n    const grids=Array.from(document.getElementsByClassName('grid'));\r\n    var x,y;\r\n    var found_start=false;\r\n    var target=[]\r\n    var found_target=false;\r\n    var i=0;\r\n    //finds start and target grid\r\n    grids.forEach(grid=>{\r\n        if(grid.classList.contains('start')){\r\n            y=Math.floor(i/no_columns)+1;\r\n            x=(i%no_columns)+1;\r\n            found_start=true;\r\n        }else if(grid.classList.contains('target')){\r\n            target.push((i%no_columns)+1);\r\n            target.push(Math.floor(i/no_columns)+1);\r\n            found_target=true;\r\n        };\r\n        i++;\r\n    });\r\n    //checks if start and target grid is selected\r\n    if(!found_start || !found_target){\r\n        alert('choose target and start grid');\r\n        return\r\n    };\r\n    //gets all the non active ,non visited neighbours\r\n    function get_neighbours(x,y,visited){\r\n        var neighbours=[];\r\n        var index=((y-1)*no_columns)+(x-1);\r\n        visited[x+','+y]=true;\r\n        //top neighbour\r\n        if(y-1>0 && !grids[index-no_columns].classList.contains('obstacle') && visited[x+','+(y-1)]===undefined){\r\n            neighbours.push([x,(y-1)]);\r\n            visited[x+','+(y-1)]=true;\r\n        };\r\n        //right neighbour\r\n        if(x+1<=no_columns && !grids[index+1].classList.contains('obstacle') && visited[(x+1)+','+y]===undefined){\r\n            neighbours.push([(x+1),y]);\r\n            visited[(x+1)+','+y]=true;\r\n        };\r\n        //bottom neighbour\r\n        if(y+1<=no_rows && !grids[index+no_columns].classList.contains('obstacle') && visited[x+','+(y+1)]===undefined){\r\n            neighbours.push([x,(y+1)]);\r\n            visited[x+','+(y+1)]=true;\r\n        };\r\n        //left neighbour\r\n        if(x-1>0 && !grids[index-1].classList.contains('obstacle') && visited[(x-1)+','+y]===undefined){\r\n            neighbours.push([(x-1),y]);\r\n            visited[(x-1)+','+y]=true;\r\n        };\r\n        return neighbours;\r\n    };\r\n    var start=[x,y]\r\n    found_target=false;\r\n    var visited={};\r\n    var parent={};\r\n    var temp,neighbours;\r\n    var queue=[[x,y]];\r\n    var intervalId=null;\r\n    intervalId=setInterval(()=>{\r\n        if(document.getElementById(\"maze_control_varaible_continue_searching\").innerHTML==\"false\"){\r\n            //stop the algorithms when stop btn is clicked\r\n            clearInterval(intervalId);\r\n            return;\r\n        };\r\n        if(queue.length<=0 || found_target){clearInterval(intervalId);};\r\n        if(x===target[0] && y===target[1]){found_target=true;};\r\n        if(!found_target){//continue until target is found do this\r\n            //dequeue from the queue\r\n            temp=queue.pop();\r\n            x=temp[0];\r\n            y=temp[1];\r\n            neighbours=get_neighbours(x,y,visited);\r\n            //add nearest parent to the neighbour and add it to the queue\r\n            neighbours.forEach(neighbour=>{\r\n                queue.splice(0,0,neighbour);\r\n                parent[neighbour[0]+','+neighbour[1]]=[x,y]\r\n            });\r\n            //show the grid as seen if the grid is not the start or the target\r\n            if(!grids[((y-1)*no_columns)+(x-1)].classList.contains('start')\r\n                && !grids[((y-1)*no_columns)+(x-1)].classList.contains('target')){\r\n                grids[((y-1)*no_columns)+(x-1)].classList.add('seen');\r\n            };\r\n        }else{// do this if target is found\r\n            while(!(x===start[0] && y===start[1])){\r\n                if(!grids[((y-1)*no_columns)+(x-1)].classList.contains('start') && \r\n                    !grids[((y-1)*no_columns)+(x-1)].classList.contains('target')){\r\n                        grids[((y-1)*no_columns)+(x-1)].classList.add('path');\r\n                };\r\n                temp=parent[x+','+y];\r\n                x=temp[0];\r\n                y=temp[1];\r\n            };\r\n        };\r\n    },25);\r\n};","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\algorithms\\Genetic_algorithm.js",["113","114","115","116","117","118","119","120","121","122","123","124","125","126"],"C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\components\\user_manual.js",["127","128","129","130","131","132","133","134","135"],"import GA_options from \"../user_manual_components/GA_options.js\"\r\nimport Maze_builder from \"../user_manual_components/maze_builder.js\"\r\nimport Maze_eraser from \"../user_manual_components/maze_eraser.js\"\r\nimport Maze_generator from \"../user_manual_components/maze_generator.js\"\r\nimport More_options from \"../user_manual_components/more_options.js\"\r\nimport Select_algorithm from \"../user_manual_components/select_algorithm.js\"\r\nimport Select_start from \"../user_manual_components/select_start.js\"\r\nimport Select_target from \"../user_manual_components/select_target.js\"\r\nimport Start_stop_algo from \"../user_manual_components/start_stop_algo.js\"\r\nimport '../css/user_manual.css'\r\n\r\n/*\r\n    component containing user manual\r\n */\r\n\r\nexport default function User_manual(){\r\n    function show_mobile_manual(){\r\n        if(window.innerWidth<=720){\r\n            return <div className=\"no_show\"><More_options id=\"manual_6\" /></div>;\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n    }\r\n    function next_clicked(){\r\n        var all_manuals=document.getElementsByClassName(\"all_manuals\")[0].children;\r\n        var to_show_index;\r\n        for(var i=0;i<all_manuals.length;i++){\r\n            if(all_manuals[i].classList.contains(\"show\")){\r\n                to_show_index=i+1;\r\n                all_manuals[i].classList.remove(\"show\");\r\n            };\r\n        };\r\n        if(to_show_index>all_manuals.length-1){skip();return;}\r\n        all_manuals[to_show_index].classList.add(\"show\");\r\n    };\r\n    function prev_clicked(){\r\n        var all_manuals=document.getElementsByClassName(\"all_manuals\")[0].children;\r\n        var to_show_index;\r\n        for(var i=0;i<all_manuals.length;i++){\r\n            if(all_manuals[i].classList.contains(\"show\")){\r\n                to_show_index=i-1;\r\n                all_manuals[i].classList.remove(\"show\");\r\n            };\r\n        };\r\n        if(to_show_index<0){to_show_index=0};\r\n        all_manuals[to_show_index].classList.add(\"show\");\r\n    };\r\n    function skip(){\r\n        document.getElementsByClassName(\"user_manual_main_container\")[0].classList.add(\"no_show\");\r\n    }\r\n    return (\r\n        <div className=\"user_manual_main_container\">\r\n            <button className=\"button prev\" onClick={prev_clicked}>Prev</button>\r\n            <button className=\"button next\" onClick={next_clicked}>Next</button>\r\n                <div className=\"all_manuals\">\r\n                    <div className=\"no_show show\"><Select_start id=\"manual_1\" /></div>\r\n                    <div className=\"no_show\"><Select_target id=\"manual_2\" /></div>\r\n                    <div className=\"no_show\"><Maze_builder id=\"manual_3\" /></div>\r\n                    <div className=\"no_show\"><Maze_eraser id=\"manual_4\" /></div>\r\n                    <div className=\"no_show\"><Maze_generator id=\"manual_5\" /></div>\r\n                    {show_mobile_manual()}\r\n                    <div className=\"no_show\"><Select_algorithm id=\"manual_7\" /></div>\r\n                    <div className=\"no_show\"><GA_options id=\"manual_8\" /></div>\r\n                    <div className=\"no_show\"><Start_stop_algo id=\"manual_9\" /></div>\r\n                </div>\r\n            <button className=\"button skip\" onClick={skip}>Skip</button>\r\n        </div>\r\n    );\r\n};","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\maze_builder.js",["136","137","138"],"import choose_builder from  \"../user mannual  images/choose_builder.PNG\"\r\nimport  maze_build1 from \"../user mannual  images/maze_build1.PNG\"\r\nimport  maze_build2 from \"../user mannual  images/maze_build2.PNG\"\r\nimport \"../css/user_manual.css\"\r\n//maze buuilder selecting and building detail\r\n\r\nexport default function Maze_builder(){\r\n    return (\r\n        <div className=\"user_manual_container\">\r\n            <h3>Build Obstacles</h3>\r\n            <ul className=\"texts\">\r\n                <li>Select builder in options.</li>\r\n                <li>Then click on the grid to be a obstacle.</li>\r\n                <li>Then hover around to create more obstacle.</li>\r\n                <li>When done click again.</li>\r\n            </ul>\r\n            <img src={choose_builder}></img>\r\n            <img src={maze_build1}></img>\r\n            <img src={maze_build2}></img>\r\n        </div>\r\n    );\r\n};","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\maze_generator.js",["139"],"import choose_generate_maze from  \"../user mannual  images/choose_generate_maze.PNG\"\r\nimport \"../css/user_manual.css\"\r\n//maze generation detail\r\n\r\nexport default function Maze_generator(){\r\n    return (\r\n        <div className=\"user_manual_container\">\r\n            <h3>Auto Build Maze</h3>\r\n            <ul className=\"texts\">\r\n                <li>Click on the generate maze button to automatically built a maze.</li>\r\n            </ul>\r\n            <img src={choose_generate_maze}></img>\r\n        </div>\r\n    );\r\n};","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\more_options.js",["140","141"],"import choose_more from  \"../user mannual  images/mobile/choose_more.PNG\"\r\nimport optioons_open from  \"../user mannual  images/mobile/options_open.PNG\"\r\nimport \"../css/user_manual.css\"\r\n//more options detail\r\n\r\nexport default function More_options(){\r\n    return (\r\n        <div className=\"user_manual_container\">\r\n            <h3>More Options</h3>\r\n            <ul className=\"texts\">\r\n                <li>Click on More see more options.</li>\r\n                <li>Click on X close more options.</li>\r\n            </ul>\r\n            <img src={choose_more}></img>\r\n            <img src={optioons_open}></img>\r\n        </div>\r\n    );\r\n};","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\select_start.js",["142","143"],"import choose_start from  \"../user mannual  images/choose_start.PNG\"\r\nimport  build_start from \"../user mannual  images/build_start.PNG\"\r\nimport \"../css/user_manual.css\"\r\n//start selecting detail\r\n\r\nexport default function Select_start(){\r\n    return (\r\n        <div className=\"user_manual_container\">\r\n            <h3>Choose Start grid</h3>\r\n            <ul className=\"texts\">\r\n                <li>Select start in options.</li>\r\n                <li>Then choose the grid to be the start of the path.</li>\r\n            </ul>\r\n            <img src={choose_start}></img><br></br>\r\n            <img src={build_start}></img>\r\n        </div>\r\n    );\r\n};","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\select_algorithm.js",["144"],"import choose_algorithm from  \"../user mannual  images/choose_algorithm.PNG\"\r\nimport \"../css/user_manual.css\"\r\n//algorithm selection detail\r\n\r\nexport default function Select_algorithm(){\r\n    return (\r\n        <div className=\"user_manual_container\">\r\n            <h3>Select Algorithm</h3>\r\n            <ul className=\"texts\">\r\n                <li>Click on algorithm dropdown menu and choose an algorithm.</li>\r\n            </ul>\r\n            <img src={choose_algorithm}></img>\r\n        </div>\r\n    );\r\n};","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\GA_options.js",["145","146"],"import choose_mutation_rate from  \"../user mannual  images/choose_mutation_rate.PNG\"\r\nimport choose_population from  \"../user mannual  images/choose_population.PNG\"\r\nimport \"../css/user_manual.css\"\r\n//population and mutation rate control detail\r\n\r\nexport default function GA_options(){\r\n    return (\r\n        <div className=\"user_manual_container\">\r\n            <h3>Genetic Algorithm options</h3>\r\n            <ul className=\"texts\">\r\n                <li>If you choose Genetic Algorithms,you can customize by changing,</li>\r\n                <li>Mutation Rate.</li>\r\n                <li>Population.</li>\r\n            </ul>\r\n            <img src={choose_mutation_rate}></img>\r\n            <img src={choose_population}></img>\r\n        </div>\r\n    );\r\n};","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\start_stop_algo.js",["147","148"],"import choose_start from  \"../user mannual  images/choose_start.PNG\"\r\nimport choose_stop from  \"../user mannual  images/choose_stop.PNG\"\r\nimport \"../css/user_manual.css\"\r\n//details on starting and stoping algorithm\r\n\r\nexport default function Start_stop_algo(){\r\n    return (\r\n        <div className=\"user_manual_container\">\r\n            <h3>Start and Stop the algorithm.</h3>\r\n            <ul className=\"texts\">\r\n                <li>Click on Find Path to run algorithm.</li>\r\n                <li>Click on Stop to stop algorithm.</li>\r\n                <li>***Always Stop the algorithm before starting another algorithm.***</li>\r\n            </ul>\r\n            <img src={choose_start}></img>\r\n            <img src={choose_stop}></img>\r\n        </div>\r\n    );\r\n};","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\select_target.js",["149","150"],"import choose_target from  \"../user mannual  images/Choose_target.PNG\"\r\nimport  build_target from \"../user mannual  images/build_target.PNG\"\r\nimport \"../css/user_manual.css\"\r\n//target selecting detail\r\n\r\nexport default function Select_target(){\r\n    return (\r\n        <div className=\"user_manual_container\">\r\n            <h3>Choose Target grid</h3>\r\n            <ul className=\"texts\">\r\n                <li>Select target in options.</li>\r\n                <li>Then choose the grid to be the target of the path.</li>\r\n            </ul>\r\n            <img src={choose_target}></img><br></br>\r\n            <img src={build_target}></img>\r\n        </div>\r\n    );\r\n};","C:\\Users\\lenovo\\Desktop\\git projects\\path-algo-visualiser\\src\\user_manual_components\\maze_eraser.js",["151","152","153","154"],"import choose_eraser from  \"../user mannual  images/choose_eraser.PNG\"\r\nimport  eraser1 from \"../user mannual  images/earser1.PNG\"\r\nimport  eraser2 from \"../user mannual  images/earser2.PNG\"\r\nimport  eraser3 from \"../user mannual  images/earser3.PNG\"\r\nimport \"../css/user_manual.css\"\r\n//maze eraser selection and erasing detail\r\n\r\nexport default function Maze_eraser(){\r\n    return (\r\n        <div className=\"user_manual_container\">\r\n            <h3>Erase Obstacles</h3>\r\n            <ul className=\"texts\">\r\n                <li>Select eraser in options.</li>\r\n                <li>Then click on the obstacle to erase.</li>\r\n                <li>Then hover around to erase more obstacle.</li>\r\n                <li>When done click again.</li>\r\n            </ul>\r\n            <img src={choose_eraser}></img>\r\n            <img src={eraser1}></img>\r\n            <img src={eraser2}></img>\r\n            <img src={eraser3}></img>\r\n        </div>\r\n    );\r\n};",{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":14,"column":11,"nodeType":"161","endLine":14,"endColumn":63},{"ruleId":"159","severity":1,"message":"162","line":16,"column":11,"nodeType":"161","endLine":16,"endColumn":27},{"ruleId":"163","severity":1,"message":"164","line":31,"column":81,"nodeType":"165","messageId":"166","endLine":31,"endColumn":83},{"ruleId":"163","severity":1,"message":"164","line":39,"column":82,"nodeType":"165","messageId":"166","endLine":39,"endColumn":84},{"ruleId":"167","severity":1,"message":"168","line":46,"column":13,"nodeType":"169","messageId":"170","endLine":46,"endColumn":16},{"ruleId":"167","severity":1,"message":"171","line":47,"column":13,"nodeType":"169","messageId":"170","endLine":47,"endColumn":16},{"ruleId":"163","severity":1,"message":"164","line":147,"column":49,"nodeType":"165","messageId":"166","endLine":147,"endColumn":51},{"ruleId":"163","severity":1,"message":"164","line":165,"column":16,"nodeType":"165","messageId":"166","endLine":165,"endColumn":18},{"ruleId":"163","severity":1,"message":"164","line":166,"column":16,"nodeType":"165","messageId":"166","endLine":166,"endColumn":18},{"ruleId":"163","severity":1,"message":"164","line":167,"column":16,"nodeType":"165","messageId":"166","endLine":167,"endColumn":18},{"ruleId":"163","severity":1,"message":"164","line":168,"column":16,"nodeType":"165","messageId":"166","endLine":168,"endColumn":18},{"ruleId":"163","severity":1,"message":"164","line":175,"column":30,"nodeType":"165","messageId":"166","endLine":175,"endColumn":32},{"ruleId":"163","severity":1,"message":"164","line":84,"column":89,"nodeType":"165","messageId":"166","endLine":84,"endColumn":91},{"ruleId":"163","severity":1,"message":"164","line":100,"column":52,"nodeType":"165","messageId":"166","endLine":100,"endColumn":54},{"ruleId":"163","severity":1,"message":"164","line":78,"column":89,"nodeType":"165","messageId":"166","endLine":78,"endColumn":91},{"ruleId":"163","severity":1,"message":"164","line":61,"column":89,"nodeType":"165","messageId":"166","endLine":61,"endColumn":91},{"ruleId":"163","severity":1,"message":"172","line":84,"column":26,"nodeType":"165","messageId":"166","endLine":84,"endColumn":28},{"ruleId":"163","severity":1,"message":"172","line":84,"column":48,"nodeType":"165","messageId":"166","endLine":84,"endColumn":50},{"ruleId":"167","severity":1,"message":"173","line":217,"column":17,"nodeType":"169","messageId":"170","endLine":217,"endColumn":26},{"ruleId":"167","severity":1,"message":"174","line":231,"column":21,"nodeType":"169","messageId":"170","endLine":231,"endColumn":32},{"ruleId":"163","severity":1,"message":"172","line":236,"column":26,"nodeType":"165","messageId":"166","endLine":236,"endColumn":28},{"ruleId":"163","severity":1,"message":"172","line":236,"column":53,"nodeType":"165","messageId":"166","endLine":236,"endColumn":55},{"ruleId":"167","severity":1,"message":"175","line":254,"column":17,"nodeType":"169","messageId":"170","endLine":254,"endColumn":27},{"ruleId":"163","severity":1,"message":"164","line":264,"column":18,"nodeType":"165","messageId":"166","endLine":264,"endColumn":20},{"ruleId":"163","severity":1,"message":"164","line":264,"column":39,"nodeType":"165","messageId":"166","endLine":264,"endColumn":41},{"ruleId":"167","severity":1,"message":"176","line":266,"column":13,"nodeType":"169","messageId":"170","endLine":266,"endColumn":14},{"ruleId":"163","severity":1,"message":"164","line":270,"column":89,"nodeType":"165","messageId":"166","endLine":270,"endColumn":91},{"ruleId":"163","severity":1,"message":"164","line":289,"column":23,"nodeType":"165","messageId":"166","endLine":289,"endColumn":25},{"ruleId":"167","severity":1,"message":"176","line":295,"column":17,"nodeType":"169","messageId":"170","endLine":295,"endColumn":18},{"ruleId":"167","severity":1,"message":"177","line":299,"column":17,"nodeType":"169","messageId":"170","endLine":299,"endColumn":21},{"ruleId":"159","severity":1,"message":"178","line":19,"column":45,"nodeType":"161","endLine":19,"endColumn":75},{"ruleId":"159","severity":1,"message":"179","line":57,"column":51,"nodeType":"161","endLine":57,"endColumn":81},{"ruleId":"159","severity":1,"message":"180","line":58,"column":46,"nodeType":"161","endLine":58,"endColumn":77},{"ruleId":"159","severity":1,"message":"181","line":59,"column":46,"nodeType":"161","endLine":59,"endColumn":76},{"ruleId":"159","severity":1,"message":"182","line":60,"column":46,"nodeType":"161","endLine":60,"endColumn":75},{"ruleId":"159","severity":1,"message":"183","line":61,"column":46,"nodeType":"161","endLine":61,"endColumn":78},{"ruleId":"159","severity":1,"message":"184","line":63,"column":46,"nodeType":"161","endLine":63,"endColumn":80},{"ruleId":"159","severity":1,"message":"185","line":64,"column":46,"nodeType":"161","endLine":64,"endColumn":74},{"ruleId":"159","severity":1,"message":"186","line":65,"column":46,"nodeType":"161","endLine":65,"endColumn":79},{"ruleId":"187","severity":1,"message":"188","line":17,"column":13,"nodeType":"161","endLine":17,"endColumn":39},{"ruleId":"187","severity":1,"message":"188","line":18,"column":13,"nodeType":"161","endLine":18,"endColumn":36},{"ruleId":"187","severity":1,"message":"188","line":19,"column":13,"nodeType":"161","endLine":19,"endColumn":36},{"ruleId":"187","severity":1,"message":"188","line":12,"column":13,"nodeType":"161","endLine":12,"endColumn":45},{"ruleId":"187","severity":1,"message":"188","line":14,"column":13,"nodeType":"161","endLine":14,"endColumn":36},{"ruleId":"187","severity":1,"message":"188","line":15,"column":13,"nodeType":"161","endLine":15,"endColumn":38},{"ruleId":"187","severity":1,"message":"188","line":14,"column":13,"nodeType":"161","endLine":14,"endColumn":37},{"ruleId":"187","severity":1,"message":"188","line":15,"column":13,"nodeType":"161","endLine":15,"endColumn":36},{"ruleId":"187","severity":1,"message":"188","line":12,"column":13,"nodeType":"161","endLine":12,"endColumn":41},{"ruleId":"187","severity":1,"message":"188","line":15,"column":13,"nodeType":"161","endLine":15,"endColumn":45},{"ruleId":"187","severity":1,"message":"188","line":16,"column":13,"nodeType":"161","endLine":16,"endColumn":42},{"ruleId":"187","severity":1,"message":"188","line":15,"column":13,"nodeType":"161","endLine":15,"endColumn":37},{"ruleId":"187","severity":1,"message":"188","line":16,"column":13,"nodeType":"161","endLine":16,"endColumn":36},{"ruleId":"187","severity":1,"message":"188","line":14,"column":13,"nodeType":"161","endLine":14,"endColumn":38},{"ruleId":"187","severity":1,"message":"188","line":15,"column":13,"nodeType":"161","endLine":15,"endColumn":37},{"ruleId":"187","severity":1,"message":"188","line":18,"column":13,"nodeType":"161","endLine":18,"endColumn":38},{"ruleId":"187","severity":1,"message":"188","line":19,"column":13,"nodeType":"161","endLine":19,"endColumn":32},{"ruleId":"187","severity":1,"message":"188","line":20,"column":13,"nodeType":"161","endLine":20,"endColumn":32},{"ruleId":"187","severity":1,"message":"188","line":21,"column":13,"nodeType":"161","endLine":21,"endColumn":32},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],"react/jsx-pascal-case","Imported JSX component Maze_control must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component User_Mannual must be in PascalCase or SCREAMING_SNAKE_CASE","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'min' is already defined.","Identifier","redeclared","'max' is already defined.","Expected '!==' and instead saw '!='.","'temp_path' is already defined.","'temp_target' is already defined.","'temp_child' is already defined.","'i' is already defined.","'temp' is already defined.","Imported JSX component More_options must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Select_start must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Select_target must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Maze_builder must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Maze_eraser must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Maze_generator must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Select_algorithm must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component GA_options must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Start_stop_algo must be in PascalCase or SCREAMING_SNAKE_CASE","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]