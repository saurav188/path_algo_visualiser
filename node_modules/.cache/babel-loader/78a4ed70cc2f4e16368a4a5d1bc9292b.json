{"ast":null,"code":"export default function dijsktra(no_rows,no_columns){const grids=Array.from(document.getElementsByClassName('grid'));let x,y;var found_start=false;let target=[];var found_target=false;var i=0;//finds start and target grid\ngrids.forEach(grid=>{if(grid.classList.contains('start')){y=Math.floor(i/no_columns)+1;x=i%no_columns+1;found_start=true;}else if(grid.classList.contains('target')){target.push(i%no_columns+1);target.push(Math.floor(i/no_columns)+1);found_target=true;};i++;});//checks if start and target grid is selected\nif(!found_start||!found_target){alert('choose target and start grid');return;};//gets all the non active ,non visited neighbours\n//gets all the non active ,non visited neighbours\nfunction get_neighbours(x,y){var neighbours=[];var index=(y-1)*no_columns+(x-1);//top neighbour\nif(y-1>0&&!grids[index-no_columns].classList.contains('obstacle')){neighbours.push([x,y-1]);};//right neighbour\nif(x+1<=no_columns&&!grids[index+1].classList.contains('obstacle')){neighbours.push([x+1,y]);};//bottom neighbour\nif(y+1<=no_rows&&!grids[index+no_columns].classList.contains('obstacle')){neighbours.push([x,y+1]);};//left neighbour\nif(x-1>0&&!grids[index-1].classList.contains('obstacle')){neighbours.push([x-1,y]);};return neighbours;};var j=1;var k=1;var active_grids=[];//puts all the active grid to the array gids\ngrids.forEach(grid=>{if(!grid.classList.contains('obstacle')){active_grids.push([j,k]);};if(j===no_columns){k++;j=1;}else{j++;};});let dist={};//dist from start of all the grids is infinity \nactive_grids.forEach(each=>{dist[each[0]+','+each[1]]=999999;});//dist of start from start is 0\ndist[x+','+y]=0;var start=[x,y];var parent={};let neighbours,min;let current,z,temp;var keep_looping=true;var intervalId=null;intervalId=setInterval(()=>{if(document.getElementById(\"maze_control_varaible_continue_searching\").innerHTML==\"false\"){//stops the algorithm if stop btn is clicked\nclearInterval(intervalId);return;};if(active_grids.length<=0||!keep_looping){clearInterval(intervalId);}min=99999;for(var i=0;i<active_grids.length;i++){temp=dist[active_grids[i][0]+','+active_grids[i][1]];if(min>temp){min=temp;z=i;};};current=active_grids[z];//removes current form active_grids\nactive_grids.splice(z,1);neighbours=get_neighbours(current[0],current[1]);neighbours.forEach(neighbour=>{//adds best parent to the neighbour\nif(dist[current[0]+','+current[1]]+1<dist[neighbour[0]+','+neighbour[1]]){dist[neighbour[0]+','+neighbour[1]]=dist[current[0]+','+current[1]]+1;parent[neighbour[0]+','+neighbour[1]]=[current[0],current[1]];}//checks if the the target is reached\nif(neighbour[0]===target[0]&&neighbour[1]===target[1]){x=neighbour[0];y=neighbour[1];keep_looping=false;};//shows the grid is visited\nif(!grids[(neighbour[1]-1)*no_columns+(neighbour[0]-1)].classList.contains('start')&&!grids[(neighbour[1]-1)*no_columns+(neighbour[0]-1)].classList.contains('target')){grids[(neighbour[1]-1)*no_columns+(neighbour[0]-1)].classList.add('seen');grids[(neighbour[1]-1)*no_columns+(neighbour[0]-1)].innerHTML=dist[neighbour[0]+\",\"+neighbour[1]];};});if(!keep_looping){//display the final path \nwhile(!(x===start[0]&&y===start[1])){if(!grids[(y-1)*no_columns+(x-1)].classList.contains('start')&&!grids[(y-1)*no_columns+(x-1)].classList.contains('target')){grids[(y-1)*no_columns+(x-1)].classList.add('path');};temp=parent[x+','+y];x=temp[0];y=temp[1];};}},25);};","map":{"version":3,"names":["dijsktra","no_rows","no_columns","grids","Array","from","document","getElementsByClassName","x","y","found_start","target","found_target","i","forEach","grid","classList","contains","Math","floor","push","alert","get_neighbours","neighbours","index","j","k","active_grids","dist","each","start","parent","min","current","z","temp","keep_looping","intervalId","setInterval","getElementById","innerHTML","clearInterval","length","splice","neighbour","add"],"sources":["/Users/sauravthakur/Desktop/Github/path_algo_visualiser/src/algorithms/dijskra.js"],"sourcesContent":["export default function dijsktra(no_rows,no_columns){\n    const grids=Array.from(document.getElementsByClassName('grid'));\n    let x,y;\n    var found_start=false;\n    let target=[]\n    var found_target=false;\n    var i=0;\n    //finds start and target grid\n    grids.forEach(grid=>{\n        if(grid.classList.contains('start')){\n            y=Math.floor(i/no_columns)+1;\n            x=(i%no_columns)+1;\n            found_start=true;\n        }else if(grid.classList.contains('target')){\n            target.push((i%no_columns)+1);\n            target.push(Math.floor(i/no_columns)+1);\n            found_target=true;\n        };\n        i++;\n    });\n    //checks if start and target grid is selected\n    if(!found_start || !found_target){\n        alert('choose target and start grid');\n        return\n    };\n    //gets all the non active ,non visited neighbours\n    //gets all the non active ,non visited neighbours\n    function get_neighbours(x,y){\n        var neighbours=[];\n        var index=((y-1)*no_columns)+(x-1);\n        //top neighbour\n        if(y-1>0 && !grids[index-no_columns].classList.contains('obstacle')){\n            neighbours.push([x,(y-1)]);\n        };\n        //right neighbour\n        if(x+1<=no_columns && !grids[index+1].classList.contains('obstacle')){\n            neighbours.push([(x+1),y]);\n        };\n        //bottom neighbour\n        if(y+1<=no_rows && !grids[index+no_columns].classList.contains('obstacle')){\n            neighbours.push([x,(y+1)]);\n        };\n        //left neighbour\n        if(x-1>0 && !grids[index-1].classList.contains('obstacle')){\n            neighbours.push([(x-1),y]);\n        };\n        return neighbours;\n    };\n    var j=1;\n    var k=1;\n    var active_grids=[]\n    //puts all the active grid to the array gids\n    grids.forEach(grid=>{\n        if(!grid.classList.contains('obstacle')){\n            active_grids.push([j,k]);\n        };\n        if(j===no_columns){\n            k++;\n            j=1;\n        }else{\n            j++;\n        };\n    });\n    let dist={};\n    //dist from start of all the grids is infinity \n    active_grids.forEach(each=>{\n        dist[each[0]+','+each[1]]=999999;\n    });\n    //dist of start from start is 0\n    dist[x+','+y]=0;\n    var start=[x,y]\n    var parent={};\n    let neighbours,min\n    let current,z,temp;\n    var keep_looping=true;\n    var intervalId=null;\n    intervalId=setInterval(()=>{\n        if(document.getElementById(\"maze_control_varaible_continue_searching\").innerHTML==\"false\"){\n            //stops the algorithm if stop btn is clicked\n            clearInterval(intervalId);\n            return;\n        };\n        if(active_grids.length<=0 || !keep_looping){clearInterval(intervalId);}\n        min=99999;\n        for(var i=0;i<active_grids.length;i++){\n            temp=dist[active_grids[i][0]+','+active_grids[i][1]]\n            if(min>temp){\n                min=temp;\n                z=i;\n            };\n        };\n        current=active_grids[z];\n        //removes current form active_grids\n        active_grids.splice(z,1);\n        neighbours=get_neighbours(current[0],current[1]);\n        neighbours.forEach(neighbour=>{\n            //adds best parent to the neighbour\n            if(dist[current[0]+','+current[1]]+1<dist[neighbour[0]+','+neighbour[1]]){\n                dist[neighbour[0]+','+neighbour[1]]=dist[current[0]+','+current[1]]+1;\n                parent[neighbour[0]+','+neighbour[1]]=[current[0],current[1]]\n            }\n            //checks if the the target is reached\n            if(neighbour[0]===target[0] && neighbour[1]===target[1]){\n                x=neighbour[0];\n                y=neighbour[1];\n                keep_looping=false\n            };\n            //shows the grid is visited\n            if(!grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].classList.contains('start')\n                && !grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].classList.contains('target')){\n                    grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].classList.add('seen');\n                    grids[((neighbour[1]-1)*no_columns)+(neighbour[0]-1)].innerHTML=dist[neighbour[0]+\",\"+neighbour[1]]\n            };\n        })\n        if(!keep_looping){//display the final path \n            while(!(x===start[0] && y===start[1])){\n                if(!grids[((y-1)*no_columns)+(x-1)].classList.contains('start') && \n                    !grids[((y-1)*no_columns)+(x-1)].classList.contains('target')){\n                        grids[((y-1)*no_columns)+(x-1)].classList.add('path');\n                };\n                temp=parent[x+','+y];\n                x=temp[0];\n                y=temp[1];\n            };\n        }\n    }, 25);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}