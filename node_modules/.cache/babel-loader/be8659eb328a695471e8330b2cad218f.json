{"ast":null,"code":"export default function genetic_algorithm(no_rows,no_columns){const grids=Array.from(document.getElementsByClassName('grid'));var x,y;var found_start=false;var target=[];var found_target=false;var i=0;//finds start and target\ngrids.forEach(grid=>{if(grid.classList.contains('start')){y=Math.floor(i/no_columns)+1;x=i%no_columns+1;found_start=true;}else if(grid.classList.contains('target')){target.push(i%no_columns+1);target.push(Math.floor(i/no_columns)+1);found_target=true;};i++;});//checks if start and target is found\nif(!found_start||!found_target){alert('choose target and start grid');return;};//gets all the valid, non-visited neighbours\nfunction get_neighbours(x,y,visited){var neighbours=[];var index=(y-1)*no_columns+(x-1);visited[x+','+y]=true;//top neighbour\nif(y-1>0&&!grids[index-no_columns].classList.contains('obstacle')&&visited[x+','+(y-1)]===undefined){neighbours.push([x,y-1]);visited[x+','+(y-1)]=true;};//right neighbour\nif(x+1<=no_columns&&!grids[index+1].classList.contains('obstacle')&&visited[x+1+','+y]===undefined){neighbours.push([x+1,y]);visited[x+1+','+y]=true;};//bottom neighbour\nif(y+1<=no_rows&&!grids[index+no_columns].classList.contains('obstacle')&&visited[x+','+(y+1)]===undefined){neighbours.push([x,y+1]);visited[x+','+(y+1)]=true;};//left neighbour\nif(x-1>0&&!grids[index-1].classList.contains('obstacle')&&visited[x-1+','+y]===undefined){neighbours.push([x-1,y]);visited[x-1+','+y]=true;};return neighbours;};//random no x => min<=x<max\nfunction getRndInteger(min,max){return Math.floor(Math.random()*(max-min))+min;};//removes the current path\nfunction refresh(){const grids=Array.from(document.getElementsByClassName('grid'));grids.forEach(each=>{if(each.classList.contains('path')){each.classList.remove('path');};});};//dispalys the given path\nfunction display(max_fitness_path){refresh();max_fitness_path.forEach(each=>{if(!grids[(each[1]-1)*no_columns+(each[0]-1)].classList.contains('start')&&!grids[(each[1]-1)*no_columns+(each[0]-1)].classList.contains('target')){grids[(each[1]-1)*no_columns+(each[0]-1)].classList.add('path');};});}//path class\nclass path{//initialpath setup\nconstructor(start,target){var temp_path=[];var temp=start;var temp_visited={};//builds a path\nwhile(temp[0]!=target[0]||temp[1]!=target[1]){var temp_neighbours=get_neighbours(temp[0],temp[1],temp_visited);if(temp_neighbours.length===0){break;};var temp_next_index=getRndInteger(0,temp_neighbours.length);var temp_next=temp_neighbours[temp_next_index];temp_path.push(temp_next);temp=temp_next;};//adds fitness\nvar temp_fitness=25000;if(temp[0]!==target[0]||temp[1]!==target[1]){temp_fitness=1000;}temp_fitness=temp_fitness/(temp_path.length^2);this.path=temp_path;this.fitness=Math.abs(temp_fitness);}};//gets a random parent from the given generation according to probability\nfunction get_parent_according_to_prob(current_generation){var i=Math.random();var index=0;//if probability of path i is 0.5 then it has 50% chance of chooseing\n//because if i<0.5 then it is choosen and chance of i<0.5 is 50%\nwhile(i>0){i-=current_generation[index].prob;index++;};return current_generation[index-1];};//gives fitness of the path with respect to the target\nfunction get_fitness(path,target){var temp_fitness=250000;var temp=path[path.length-1];if(temp[0]!==target[0]||temp[1]!==target[1]){temp_fitness=1000;}temp_fitness=temp_fitness/(path.length^2);return Math.abs(temp_fitness);};//does crossover between to path gives a child path of these to path\nfunction crossover2(parent1,parent2,start,target){var parent1_visited={};var parent2_visited={};var i=0;var j=0;var resulting_path=[];var path1=parent1.path;var path2=parent2.path;var both_reaches_target,parent1_reaches_target,parent2_reaches_target;var crossover_complete=false;//run the look until both paths grid can be read\nwhile(i<path1.length&&j<path2.length){//save the index of the grids visited\nparent1_visited[path1[i][0]+','+path1[i][1]]=i;parent2_visited[path2[j][0]+','+path2[j][1]]=j;//if the current path2 grid is already visited by path1\n//the path till that grid is small for path1\nif(parent1_visited[path2[j][0]+','+path2[j][1]]!==undefined){resulting_path=resulting_path.concat(path1.slice(0,parent1_visited[path2[j][0]+','+path2[j][1]]+1));parent1_reaches_target=path1[path1.length-1][0]===target[0]&&path1[path1.length-1][1]===target[1];parent2_reaches_target=path2[path2.length-1][0]===target[0]&&path2[path2.length-1][1]===target[1];both_reaches_target=parent1_reaches_target&&parent2_reaches_target;//if both reaches target \nif(both_reaches_target){if(path1.length-parent1_visited[path2[j][0]+','+path2[j][1]]<path2.length-j){resulting_path=resulting_path.concat(path1.slice(parent1_visited[path2[j][0]+','+path2[j][1]]+1,path1.length));}else{resulting_path=resulting_path.concat(path2.slice(j+1,path2.length));}}else if(parent1_reaches_target){resulting_path=resulting_path.concat(path1.slice(parent1_visited[path2[j][0]+','+path2[j][1]]+1,path1.length));}else if(parent2_reaches_target){resulting_path=resulting_path.concat(path2.slice(j+1,path2.length));}else{resulting_path=resulting_path.concat(path2.slice(j+1,path2.length));};crossover_complete=true;break;}else if(parent2_visited[path1[i][0]+','+path1[i][1]]!==undefined){resulting_path=resulting_path.concat(path2.slice(0,parent2_visited[path1[i][0]+','+path1[i][1]]+1));parent1_reaches_target=path1[path1.length-1][0]===target[0]&&path1[path1.length-1][1]===target[1];parent2_reaches_target=path2[path2.length-1][0]===target[0]&&path2[path2.length-1][1]===target[1];both_reaches_target=parent1_reaches_target&&parent2_reaches_target;if(both_reaches_target){if(path2.length-parent2_visited[path1[i][0]+','+path1[i][1]]<path1.length-i){resulting_path=resulting_path.concat(path2.slice(parent2_visited[path1[i][0]+','+path1[i][1]]+1,path2.length));}else{resulting_path=resulting_path.concat(path1.slice(i+1,path1.length));}}else if(parent2_reaches_target){resulting_path=resulting_path.concat(path2.slice(parent2_visited[path1[i][0]+','+path1[i][1]]+1,path2.length));}else if(parent1_reaches_target){resulting_path=resulting_path.concat(path1.slice(i+1,path1.length));}else{resulting_path=resulting_path.concat(path1.slice(i+1,path1.length));};crossover_complete=true;break;}else if(path1[i][0]===target[0]&&path1[i][1]===target[1]){resulting_path=resulting_path.concat(path1.slice(0,i+1));crossover_complete=true;break;}else if(path2[j][0]===target[0]&&path2[j][1]===target[1]){resulting_path=resulting_path.concat(path2.slice(0,j+1));crossover_complete=true;break;}else{i+=1;j+=1;};};if(!crossover_complete){resulting_path=path1;}var temp_child=new path(start,target);temp_child.path=resulting_path;temp_child.fitness=get_fitness(resulting_path,target);return temp_child;};//mutates the given path\nfunction mutate(child,mutation_rate,start,target){var random_no=Math.random();if(random_no*100-mutation_rate<0){var temp_child=new path(start,target);var temp_path=child.path;var random_index=getRndInteger(0,temp_path.length);var temp_path=temp_path.slice(0,random_index);var temp=child.path[random_index];var temp_visited={};var keep_original=false;var target_reacher=child.path[child.path.length-1][0]===target[0]&&child.path[child.path.length-1][1]===target[1];if(target_reacher){var random_index_two_steps_from_target=random_index+2<child.path.length;if(random_index_two_steps_from_target){random_index=getRndInteger(random_index+1,child.path.length);}else{random_index=child.path.length-1;}var temp_target=child.path[random_index];}else{var temp_target=target;}temp_path.forEach(each=>{temp_visited[each[0]+1+','+each[1]]=true;});while(temp[0]!=temp_target[0]||temp[1]!=temp_target[1]){temp_path.push(temp);var temp_neighbours=get_neighbours(temp[0],temp[1],temp_visited);if(temp_neighbours.length===0){keep_original=true;break;};var temp_next_index=getRndInteger(0,temp_neighbours.length);var temp_next=temp_neighbours[temp_next_index];temp=temp_next;};temp_path.push(temp);if(target_reacher){temp_path=temp_path.concat(child.path.slice(random_index,child.path.length));};if(keep_original){temp_path=child.path;};var temp_child=new path(start,target);temp_child.path=temp_path;temp_child.fitness=get_fitness(temp_path,target);return temp_child;};return child;};var start=[x,y];var population=document.getElementById(\"genetic_algo_population\").value;var mutation_rate=document.getElementById(\"genetic_algo_mutation_rate\").value;if(population==\"\"||mutation_rate==\"\"){alert('Enter population and mutation rate');return;}var current_generation=[];for(var i=0;i<population;i++){current_generation.push(new path(start,target));};var genetic_algorithm_interval=setInterval(()=>{if(document.getElementById(\"maze_control_varaible_continue_searching\").innerHTML==\"false\"){clearInterval(genetic_algorithm_interval);refresh();return;};var total_fitness=0;var max_fitness=0;var max_fitness_index;for(var i=0;i<current_generation.length;i++){if(current_generation[i].fitness>max_fitness){max_fitness=current_generation[i].fitness;max_fitness_index=i;};total_fitness+=current_generation[i].fitness;};var max_fitness_path=current_generation[max_fitness_index].path;current_generation.forEach(each=>{each.prob=each.fitness/total_fitness;});if(max_fitness==Infinity){genetic_algorithm(no_rows,no_columns);return;};display(max_fitness_path);var temp_generation=[];for(var i=0;i<population;i++){var parent1=get_parent_according_to_prob(current_generation);var parent2=get_parent_according_to_prob(current_generation);var temp=crossover2(parent1,parent2,start,target);var temp=mutate(temp,mutation_rate,start,target);temp_generation.push(temp);};current_generation=temp_generation;},10);};","map":{"version":3,"names":["genetic_algorithm","no_rows","no_columns","grids","Array","from","document","getElementsByClassName","x","y","found_start","target","found_target","i","forEach","grid","classList","contains","Math","floor","push","alert","get_neighbours","visited","neighbours","index","undefined","getRndInteger","min","max","random","refresh","each","remove","display","max_fitness_path","add","path","constructor","start","temp_path","temp","temp_visited","temp_neighbours","length","temp_next_index","temp_next","temp_fitness","fitness","abs","get_parent_according_to_prob","current_generation","prob","get_fitness","crossover2","parent1","parent2","parent1_visited","parent2_visited","j","resulting_path","path1","path2","both_reaches_target","parent1_reaches_target","parent2_reaches_target","crossover_complete","concat","slice","temp_child","mutate","child","mutation_rate","random_no","random_index","keep_original","target_reacher","random_index_two_steps_from_target","temp_target","population","getElementById","value","genetic_algorithm_interval","setInterval","innerHTML","clearInterval","total_fitness","max_fitness","max_fitness_index","Infinity","temp_generation"],"sources":["/Users/sauravthakur/Desktop/Github/path_algo_visualiser/src/algorithms/Genetic_algorithm.js"],"sourcesContent":["export default function genetic_algorithm(no_rows,no_columns){\n    const grids=Array.from(document.getElementsByClassName('grid'));\n    var x,y;\n    var found_start=false;\n    var target=[]\n    var found_target=false;\n    var i=0;\n    //finds start and target\n    grids.forEach(grid=>{\n        if(grid.classList.contains('start')){\n            y=Math.floor(i/no_columns)+1;\n            x=(i%no_columns)+1;\n            found_start=true;\n        }else if(grid.classList.contains('target')){\n            target.push((i%no_columns)+1);\n            target.push(Math.floor(i/no_columns)+1);\n            found_target=true;\n        };\n        i++;\n    });\n    //checks if start and target is found\n    if(!found_start || !found_target){\n        alert('choose target and start grid');\n        return\n    };\n    //gets all the valid, non-visited neighbours\n    function get_neighbours(x,y,visited){\n        var neighbours=[];\n        var index=((y-1)*no_columns)+(x-1);\n        visited[x+','+y]=true;\n        //top neighbour\n        if(y-1>0 && !grids[index-no_columns].classList.contains('obstacle') && visited[x+','+(y-1)]===undefined){\n            neighbours.push([x,(y-1)]);\n            visited[x+','+(y-1)]=true;\n        };\n        //right neighbour\n        if(x+1<=no_columns && !grids[index+1].classList.contains('obstacle') && visited[(x+1)+','+y]===undefined){\n            neighbours.push([(x+1),y]);\n            visited[(x+1)+','+y]=true;\n        };\n        //bottom neighbour\n        if(y+1<=no_rows && !grids[index+no_columns].classList.contains('obstacle') && visited[x+','+(y+1)]===undefined){\n            neighbours.push([x,(y+1)]);\n            visited[x+','+(y+1)]=true;\n        };\n        //left neighbour\n        if(x-1>0 && !grids[index-1].classList.contains('obstacle') && visited[(x-1)+','+y]===undefined){\n            neighbours.push([(x-1),y]);\n            visited[(x-1)+','+y]=true;\n        };\n        return neighbours;\n    };\n    //random no x => min<=x<max\n    function getRndInteger(min, max) {\n        return Math.floor(Math.random() * (max - min) ) + min;\n    };\n    //removes the current path\n    function refresh(){\n        const grids=Array.from(document.getElementsByClassName('grid'));\n        grids.forEach(each=>{\n            if(each.classList.contains('path')){\n                each.classList.remove('path');\n            };\n        });\n    };\n    //dispalys the given path\n    function display(max_fitness_path){\n        refresh();\n        max_fitness_path.forEach(each=>{\n            if(!grids[((each[1]-1)*no_columns)+(each[0]-1)].classList.contains('start') && \n                !grids[((each[1]-1)*no_columns)+(each[0]-1)].classList.contains('target')){\n                    grids[((each[1]-1)*no_columns)+(each[0]-1)].classList.add('path');\n            };\n        });\n    }\n    //path class\n    class path {\n        //initialpath setup\n        constructor(start,target){\n            var temp_path=[];\n            var temp=start;\n            var temp_visited={};\n            //builds a path\n            while(temp[0]!=target[0] || temp[1]!=target[1]){\n                var temp_neighbours=get_neighbours(temp[0],temp[1],temp_visited);\n                if(temp_neighbours.length===0){break};\n                var temp_next_index=getRndInteger(0,temp_neighbours.length);\n                var temp_next=temp_neighbours[temp_next_index];\n                temp_path.push(temp_next);\n                temp=temp_next;\n            };\n            //adds fitness\n            var temp_fitness=25000;\n            if(temp[0]!==target[0] || temp[1]!==target[1]){temp_fitness=1000}\n            temp_fitness=temp_fitness/(temp_path.length^2);\n            this.path=temp_path;\n            this.fitness=Math.abs(temp_fitness);\n        };\n    };\n    //gets a random parent from the given generation according to probability\n    function get_parent_according_to_prob(current_generation){\n        var i=Math.random()\n        var index=0\n        //if probability of path i is 0.5 then it has 50% chance of chooseing\n        //because if i<0.5 then it is choosen and chance of i<0.5 is 50%\n        while(i>0){\n            i-=current_generation[index].prob;\n            index++;\n        };\n        return current_generation[index-1]\n    };\n    //gives fitness of the path with respect to the target\n    function get_fitness(path,target){\n        var temp_fitness=250000;\n        var temp=path[path.length-1]\n        if(temp[0]!==target[0] || temp[1]!==target[1]){temp_fitness=1000}\n        temp_fitness=temp_fitness/(path.length^2);\n        return Math.abs(temp_fitness);\n    };\n    //does crossover between to path gives a child path of these to path\n    function crossover2(parent1,parent2,start,target){\n        var parent1_visited={};\n        var parent2_visited={};\n        var i=0;\n        var j=0;\n        var resulting_path=[];\n        var path1=parent1.path;\n        var path2=parent2.path;\n        var both_reaches_target,parent1_reaches_target,parent2_reaches_target;\n        var crossover_complete=false;\n        //run the look until both paths grid can be read\n        while(i<path1.length && j<path2.length){\n            //save the index of the grids visited\n            parent1_visited[path1[i][0]+','+path1[i][1]]=i;\n            parent2_visited[path2[j][0]+','+path2[j][1]]=j;\n            //if the current path2 grid is already visited by path1\n            //the path till that grid is small for path1\n            if(parent1_visited[path2[j][0]+','+path2[j][1]]!==undefined){\n                resulting_path=resulting_path.concat(path1.slice(0,parent1_visited[path2[j][0]+','+path2[j][1]]+1));\n                parent1_reaches_target=path1[path1.length-1][0]===target[0] && path1[path1.length-1][1]===target[1];\n                parent2_reaches_target=path2[path2.length-1][0]===target[0] && path2[path2.length-1][1]===target[1];\n                both_reaches_target=parent1_reaches_target && parent2_reaches_target;\n                //if both reaches target \n                if(both_reaches_target){\n                    if((path1.length-parent1_visited[path2[j][0]+','+path2[j][1]])<(path2.length-j)){\n                        resulting_path=resulting_path.concat(path1.slice(parent1_visited[path2[j][0]+','+path2[j][1]]+1,path1.length))\n                    }else{\n                        resulting_path=resulting_path.concat(path2.slice(j+1,path2.length))\n                    }\n                }\n                else if(parent1_reaches_target){\n                    resulting_path=resulting_path.concat(path1.slice(parent1_visited[path2[j][0]+','+path2[j][1]]+1,path1.length))\n                }\n                else if(parent2_reaches_target){\n                    resulting_path=resulting_path.concat(path2.slice(j+1,path2.length))\n                }\n                else{\n                    resulting_path=resulting_path.concat(path2.slice(j+1,path2.length))\n                };\n                crossover_complete=true;\n                break;\n            }\n            else if(parent2_visited[path1[i][0]+','+path1[i][1]]!==undefined){\n                resulting_path=resulting_path.concat(path2.slice(0,parent2_visited[path1[i][0]+','+path1[i][1]]+1));\n                parent1_reaches_target=path1[path1.length-1][0]===target[0] && path1[path1.length-1][1]===target[1];\n                parent2_reaches_target=path2[path2.length-1][0]===target[0] && path2[path2.length-1][1]===target[1];\n                both_reaches_target=parent1_reaches_target && parent2_reaches_target;\n                if(both_reaches_target){\n                    if((path2.length-parent2_visited[path1[i][0]+','+path1[i][1]])<(path1.length-i)){\n                        resulting_path=resulting_path.concat(path2.slice(parent2_visited[path1[i][0]+','+path1[i][1]]+1,path2.length))\n                    }else{\n                        resulting_path=resulting_path.concat(path1.slice(i+1,path1.length))\n                    }\n                }\n                else if(parent2_reaches_target){\n                    resulting_path=resulting_path.concat(path2.slice(parent2_visited[path1[i][0]+','+path1[i][1]]+1,path2.length))\n                }\n                else if(parent1_reaches_target){\n                    resulting_path=resulting_path.concat(path1.slice(i+1,path1.length))\n                }\n                else{\n                    resulting_path=resulting_path.concat(path1.slice(i+1,path1.length))\n                };\n                crossover_complete=true;\n                break;\n            }\n            else if(path1[i][0]===target[0] && path1[i][1]===target[1]){\n                resulting_path=resulting_path.concat(path1.slice(0,i+1));\n                crossover_complete=true;\n                break;\n            }\n            else if(path2[j][0]===target[0] && path2[j][1]===target[1]){\n                resulting_path=resulting_path.concat(path2.slice(0,j+1));\n                crossover_complete=true;\n                break;\n            }\n            else{\n                i+=1;\n                j+=1;\n            };\n        };\n        if(!crossover_complete){\n            resulting_path=path1;\n        }\n        var temp_child=new path(start,target)\n        temp_child.path=resulting_path;\n        temp_child.fitness=get_fitness(resulting_path,target)\n        return temp_child\n    };\n    //mutates the given path\n    function mutate(child,mutation_rate,start,target){\n        var random_no=Math.random();\n        if((random_no*100)-mutation_rate<0){\n            var temp_child=new path(start,target)\n            var temp_path=child.path\n            var random_index=getRndInteger(0,temp_path.length);\n            var temp_path=temp_path.slice(0,random_index);\n            var temp=child.path[random_index];\n            var temp_visited={};\n            var keep_original=false;\n            var target_reacher=child.path[child.path.length-1][0]===target[0] && child.path[child.path.length-1][1]===target[1];\n            if(target_reacher){\n                var random_index_two_steps_from_target=random_index+2<child.path.length;\n                if(random_index_two_steps_from_target){\n                    random_index=getRndInteger(random_index+1,child.path.length);\n                }else{\n                    random_index=child.path.length-1;\n                }\n                var temp_target=child.path[random_index];\n            }else{\n                var temp_target=target;\n            }\n            temp_path.forEach(each=>{\n                temp_visited[(each[0]+1)+','+each[1]]=true;\n            });\n            while(temp[0]!=temp_target[0] || temp[1]!=temp_target[1]){\n                temp_path.push(temp);\n                var temp_neighbours=get_neighbours(temp[0],temp[1],temp_visited);\n                if(temp_neighbours.length===0){\n                    keep_original=true;\n                    break\n                };\n                var temp_next_index=getRndInteger(0,temp_neighbours.length);\n                var temp_next=temp_neighbours[temp_next_index];\n                temp=temp_next;\n            };\n            temp_path.push(temp);\n            if(target_reacher){\n                temp_path=temp_path.concat(child.path.slice(random_index,child.path.length))\n            };\n            if(keep_original){\n                temp_path=child.path;\n            };\n            var temp_child=new path(start, target)\n            temp_child.path=temp_path;\n            temp_child.fitness=get_fitness(temp_path,target)\n            return temp_child\n        };\n        return child;\n    };\n    var start=[x,y]\n    var population=document.getElementById(\"genetic_algo_population\").value;\n    var mutation_rate=document.getElementById(\"genetic_algo_mutation_rate\").value;\n    if(population==\"\" || mutation_rate==\"\"){alert('Enter population and mutation rate');return}\n    var current_generation=[];\n    for(var i=0;i<population;i++){\n        current_generation.push(new path(start,target));\n    };\n    var genetic_algorithm_interval=setInterval(() => {\n        if(document.getElementById(\"maze_control_varaible_continue_searching\").innerHTML==\"false\"){\n            clearInterval(genetic_algorithm_interval);\n            refresh();\n            return;\n        };\n        var total_fitness=0;\n        var max_fitness=0;\n        var max_fitness_index;\n        for(var i=0;i<current_generation.length;i++){\n            if(current_generation[i].fitness>max_fitness){\n                max_fitness=current_generation[i].fitness;\n                max_fitness_index=i;\n            };\n            total_fitness+=current_generation[i].fitness;\n        };\n        var max_fitness_path=current_generation[max_fitness_index].path;\n        current_generation.forEach(each=>{\n            each.prob=each.fitness/total_fitness;\n        });\n        if(max_fitness==Infinity){\n            genetic_algorithm(no_rows,no_columns);\n            return;\n        };\n        display(max_fitness_path);\n        var temp_generation=[]\n        for(var i=0;i<population;i++){\n            var parent1=get_parent_according_to_prob(current_generation);\n            var parent2=get_parent_according_to_prob(current_generation);\n            var temp=crossover2(parent1,parent2,start,target);\n            var temp=mutate(temp,mutation_rate,start,target);\n            temp_generation.push(temp);\n        };\n        current_generation=temp_generation;\n    },10)\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}