{"ast":null,"code":"export default function BFS(no_rows,no_columns){const grids=Array.from(document.getElementsByClassName('grid'));var x,y;var found_start=false;var target=[];var found_target=false;var i=0;//finds start and target grid\ngrids.forEach(grid=>{if(grid.classList.contains('start')){y=Math.floor(i/no_columns)+1;x=i%no_columns+1;found_start=true;}else if(grid.classList.contains('target')){target.push(i%no_columns+1);target.push(Math.floor(i/no_columns)+1);found_target=true;};i++;});//checks if start and target grid is selected\nif(!found_start||!found_target){alert('choose target and start grid');return;};//gets all the non active ,non visited neighbours\nfunction get_neighbours(x,y,visited){var neighbours=[];var index=(y-1)*no_columns+(x-1);visited[x+','+y]=true;//top neighbour\nif(y-1>0&&!grids[index-no_columns].classList.contains('obstacle')&&visited[x+','+(y-1)]===undefined){neighbours.push([x,y-1]);visited[x+','+(y-1)]=true;};//right neighbour\nif(x+1<=no_columns&&!grids[index+1].classList.contains('obstacle')&&visited[x+1+','+y]===undefined){neighbours.push([x+1,y]);visited[x+1+','+y]=true;};//bottom neighbour\nif(y+1<=no_rows&&!grids[index+no_columns].classList.contains('obstacle')&&visited[x+','+(y+1)]===undefined){neighbours.push([x,y+1]);visited[x+','+(y+1)]=true;};//left neighbour\nif(x-1>0&&!grids[index-1].classList.contains('obstacle')&&visited[x-1+','+y]===undefined){neighbours.push([x-1,y]);visited[x-1+','+y]=true;};return neighbours;};var start=[x,y];found_target=false;var visited={};var parent={};var temp,neighbours;var queue=[[x,y]];var intervalId=null;intervalId=setInterval(()=>{if(document.getElementById(\"maze_control_varaible_continue_searching\").innerHTML==\"false\"){//stop the algorithms when stop btn is clicked\nclearInterval(intervalId);return;};if(queue.length<=0||found_target){clearInterval(intervalId);};if(x===target[0]&&y===target[1]){found_target=true;};if(!found_target){//continue until target is found do this\n//dequeue from the queue\ntemp=queue.pop();x=temp[0];y=temp[1];neighbours=get_neighbours(x,y,visited);//add nearest parent to the neighbour and add it to the queue\nneighbours.forEach(neighbour=>{queue.splice(0,0,neighbour);parent[neighbour[0]+','+neighbour[1]]=[x,y];});//show the grid as seen if the grid is not the start or the target\nif(!grids[(y-1)*no_columns+(x-1)].classList.contains('start')&&!grids[(y-1)*no_columns+(x-1)].classList.contains('target')){grids[(y-1)*no_columns+(x-1)].classList.add('seen');};}else{// do this if target is found\nwhile(!(x===start[0]&&y===start[1])){if(!grids[(y-1)*no_columns+(x-1)].classList.contains('start')&&!grids[(y-1)*no_columns+(x-1)].classList.contains('target')){grids[(y-1)*no_columns+(x-1)].classList.add('path');};temp=parent[x+','+y];x=temp[0];y=temp[1];};};},25);};","map":{"version":3,"names":["BFS","no_rows","no_columns","grids","Array","from","document","getElementsByClassName","x","y","found_start","target","found_target","i","forEach","grid","classList","contains","Math","floor","push","alert","get_neighbours","visited","neighbours","index","undefined","start","parent","temp","queue","intervalId","setInterval","getElementById","innerHTML","clearInterval","length","pop","neighbour","splice","add"],"sources":["/Users/sauravthakur/Desktop/Github/path_algo_visualiser/src/algorithms/BFS.js"],"sourcesContent":["export default function BFS(no_rows,no_columns){\n    const grids=Array.from(document.getElementsByClassName('grid'));\n    var x,y;\n    var found_start=false;\n    var target=[]\n    var found_target=false;\n    var i=0;\n    //finds start and target grid\n    grids.forEach(grid=>{\n        if(grid.classList.contains('start')){\n            y=Math.floor(i/no_columns)+1;\n            x=(i%no_columns)+1;\n            found_start=true;\n        }else if(grid.classList.contains('target')){\n            target.push((i%no_columns)+1);\n            target.push(Math.floor(i/no_columns)+1);\n            found_target=true;\n        };\n        i++;\n    });\n    //checks if start and target grid is selected\n    if(!found_start || !found_target){\n        alert('choose target and start grid');\n        return\n    };\n    //gets all the non active ,non visited neighbours\n    function get_neighbours(x,y,visited){\n        var neighbours=[];\n        var index=((y-1)*no_columns)+(x-1);\n        visited[x+','+y]=true;\n        //top neighbour\n        if(y-1>0 && !grids[index-no_columns].classList.contains('obstacle') && visited[x+','+(y-1)]===undefined){\n            neighbours.push([x,(y-1)]);\n            visited[x+','+(y-1)]=true;\n        };\n        //right neighbour\n        if(x+1<=no_columns && !grids[index+1].classList.contains('obstacle') && visited[(x+1)+','+y]===undefined){\n            neighbours.push([(x+1),y]);\n            visited[(x+1)+','+y]=true;\n        };\n        //bottom neighbour\n        if(y+1<=no_rows && !grids[index+no_columns].classList.contains('obstacle') && visited[x+','+(y+1)]===undefined){\n            neighbours.push([x,(y+1)]);\n            visited[x+','+(y+1)]=true;\n        };\n        //left neighbour\n        if(x-1>0 && !grids[index-1].classList.contains('obstacle') && visited[(x-1)+','+y]===undefined){\n            neighbours.push([(x-1),y]);\n            visited[(x-1)+','+y]=true;\n        };\n        return neighbours;\n    };\n    var start=[x,y]\n    found_target=false;\n    var visited={};\n    var parent={};\n    var temp,neighbours;\n    var queue=[[x,y]];\n    var intervalId=null;\n    intervalId=setInterval(()=>{\n        if(document.getElementById(\"maze_control_varaible_continue_searching\").innerHTML==\"false\"){\n            //stop the algorithms when stop btn is clicked\n            clearInterval(intervalId);\n            return;\n        };\n        if(queue.length<=0 || found_target){clearInterval(intervalId);};\n        if(x===target[0] && y===target[1]){found_target=true;};\n        if(!found_target){//continue until target is found do this\n            //dequeue from the queue\n            temp=queue.pop();\n            x=temp[0];\n            y=temp[1];\n            neighbours=get_neighbours(x,y,visited);\n            //add nearest parent to the neighbour and add it to the queue\n            neighbours.forEach(neighbour=>{\n                queue.splice(0,0,neighbour);\n                parent[neighbour[0]+','+neighbour[1]]=[x,y]\n            });\n            //show the grid as seen if the grid is not the start or the target\n            if(!grids[((y-1)*no_columns)+(x-1)].classList.contains('start')\n                && !grids[((y-1)*no_columns)+(x-1)].classList.contains('target')){\n                grids[((y-1)*no_columns)+(x-1)].classList.add('seen');\n            };\n        }else{// do this if target is found\n            while(!(x===start[0] && y===start[1])){\n                if(!grids[((y-1)*no_columns)+(x-1)].classList.contains('start') && \n                    !grids[((y-1)*no_columns)+(x-1)].classList.contains('target')){\n                        grids[((y-1)*no_columns)+(x-1)].classList.add('path');\n                };\n                temp=parent[x+','+y];\n                x=temp[0];\n                y=temp[1];\n            };\n        };\n    },25);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}